---
swagger: "2.0"
info:
  description: "One way to interact with the Slack platform is its HTTP RPC-based\
    \ Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace\
    \ tokens blessed with related OAuth scopes."
  version: "1.2.0"
  title: "Slack Web API"
host: "slack.com"
basePath: "/api"
schemes:
- "https"
paths:
  /admin.users.session.reset:
    post:
      tags:
      - "admin.users.session"
      - "admin"
      description: "Wipes all valid sessions on all devices for a given user"
      operationId: "admin_users_session_reset"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "admin.users:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/admin.users.session.reset"
  /api.test:
    get:
      tags:
      - "api"
      description: "Checks API calling code."
      operationId: "api_test"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "foo"
        in: "query"
        description: "example property to return"
        required: false
        type: "string"
        x-exportParamName: "Foo"
        x-optionalDataType: "String"
      - name: "error"
        in: "query"
        description: "Error response to return"
        required: false
        type: "string"
        x-exportParamName: "Error_"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "api.test success schema"
            description: "Schema for successful response api.test method"
            additionalProperties:
              type: "object"
              properties: {}
        default:
          description: "Artificial error response"
          examples:
            application/json:
              args:
                error: "my_error"
              error: "my_error"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "api.test error schema"
            description: "Schema for error response api.test method"
            additionalProperties:
              type: "object"
              properties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/api.test"
  /apps.permissions.info:
    get:
      tags:
      - "apps.permissions"
      - "apps"
      description: "Returns list of permissions this app has on a team."
      operationId: "apps_permissions_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response when used with a user token"
          examples:
            application/json:
              info:
                app_home:
                  resources:
                    ids:
                    - "D0C0NU1Q8"
                    - "D0BH95DLH"
                  scopes:
                  - "chat:write"
                  - "im:history"
                  - "im:read"
                channel:
                  resources:
                    excluded_ids: []
                    ids:
                    - "C061FA5PB"
                    wildcard: false
                  scopes:
                  - "channels:read"
                group:
                  resources:
                    ids: []
                  scopes: []
                im:
                  resources:
                    ids: []
                  scopes: []
                mpim:
                  resources:
                    ids: []
                  scopes: []
                team:
                  resources:
                    ids: []
                  scopes: []
              ok: true
          schema:
            type: "object"
            required:
            - "info"
            - "ok"
            properties:
              info:
                type: "object"
                properties:
                  app_home:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                  channel:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                  group:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                  im:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                  mpim:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                  team:
                    type: "object"
                    properties:
                      resources:
                        $ref: "#/definitions/objs_resources"
                      scopes:
                        $ref: "#/definitions/objs_scopes"
                    required:
                    - "resources"
                    - "scopes"
                required:
                - "app_home"
                - "channel"
                - "group"
                - "im"
                - "mpim"
                - "team"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "apps.permissions.info schema"
            description: "Schema for successful response from apps.permissions.info\
              \ method"
            additionalProperties: {}
        default:
          description: "Standard failure response when used with an invalid token"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "apps.permissions.info error schema"
            description: "Schema for error response from apps.permissions.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.info"
  /apps.permissions.request:
    get:
      tags:
      - "apps.permissions"
      - "apps"
      description: "Allows an app to request additional scopes"
      operationId: "apps_permissions_request"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "scopes"
        in: "query"
        description: "A comma separated list of scopes to request for"
        required: false
        type: "string"
        x-exportParamName: "Scopes"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "trigger_id"
        in: "query"
        description: "Token used to trigger the permissions API"
        required: false
        type: "string"
        x-exportParamName: "TriggerId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response when used with a user token"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "apps.permissions.request schema"
            description: "Schema for successful response from apps.permissions.request\
              \ method"
            additionalProperties: {}
        default:
          description: "Standard failure response when trigger_id is invalid"
          examples:
            application/json:
              error: "invalid_trigger_id"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_trigger"
                - "trigger_exchanged"
                - "invalid_scope"
                - "invalid_user"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "apps.permissions.request error schema"
            description: "Schema for error response from apps.permissions.request\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.request"
  /apps.permissions.resources.list:
    get:
      tags:
      - "apps.permissions.resources"
      - "apps"
      description: "Returns list of resource grants this app has on a team."
      operationId: "apps_permissions_resources_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical successful paginated response"
          examples:
            application/json:
              ok: true
              resources:
              - id: "T0DES3UAN"
                type: "team"
              - id: "D024BFF1M"
                type: "app_home"
              - id: "C024BE91L"
                type: "channel"
              response_metadata:
                next_cursor: "dGVhbTpDMUg5UkVTR0w="
          schema:
            type: "object"
            required:
            - "ok"
            - "resources"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              resources:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "string"
                      title: "An ID for a resource"
                      x-examples:
                      - "T0DES3UAN"
                      - "C0ABC1ABC"
                    type:
                      type: "string"
                      title: "The type of resource the `id` corresponds to"
                      x-examples:
                      - "team"
                      - "channel"
                      - "mpim"
              response_metadata:
                type: "object"
                properties:
                  next_cursor:
                    type: "string"
                    x-examples:
                    - "dGVhbTpDMUg5UkVTR0w="
                required:
                - "next_cursor"
            title: "apps.permissions.resources.list success schema"
            description: "Schema for successful response apps.permissions.resources.list\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_cursor"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_cursor"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "apps.permissions.resources.list error schema"
            description: "Schema for error response from apps.permissions.resources.list\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.resources.list"
  /apps.permissions.scopes.list:
    get:
      tags:
      - "apps.permissions.scopes"
      - "apps"
      description: "Returns list of scopes this app has on a team."
      operationId: "apps_permissions_scopes_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical successful paginated response"
          examples:
            application/json:
              ok: true
              scopes:
                app_home:
                - "chat:write"
                - "im:history"
                - "im:read"
                channel:
                - "channels:history"
                - "chat:write"
                group:
                - "chat:write"
                im:
                - "chat:write"
                mpim:
                - "chat:write"
                team:
                - "users:read"
                user: []
          schema:
            type: "object"
            required:
            - "ok"
            - "scopes"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              scopes:
                type: "object"
                properties:
                  app_home:
                    $ref: "#/definitions/objs_scopes"
                  channel:
                    $ref: "#/definitions/objs_scopes"
                  group:
                    $ref: "#/definitions/objs_scopes"
                  im:
                    $ref: "#/definitions/objs_scopes"
                  mpim:
                    $ref: "#/definitions/objs_scopes"
                  team:
                    $ref: "#/definitions/objs_scopes"
                  user:
                    $ref: "#/definitions/objs_scopes"
            title: "api.permissions.scopes.list success schema"
            description: "Schema for successful response api.permissions.scopes.list\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "apps.permissions.scopes.list error schema"
            description: "Schema for error response from apps.permissions.scopes.list\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.scopes.list"
  /apps.permissions.users.list:
    get:
      tags:
      - "apps.permissions.users"
      - "apps"
      description: "Returns list of user grants and corresponding scopes this app\
        \ has on a team."
      operationId: "apps_permissions_users_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical successful paginated response"
          examples:
            application/json:
              ok: true
              resources:
              - id: "U0DES3UAN"
                scopes:
                - "dnd:write:user"
                - "reminders:write:user"
              - id: "U024BFF1M"
                scopes:
                - "reminders:write:user"
              response_metadata:
                next_cursor: "dGVhbTdPMUg5UkFTT0w="
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_cursor"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.users.list"
  /apps.permissions.users.request:
    get:
      tags:
      - "apps.permissions.users"
      - "apps"
      description: "Enables an app to trigger a permissions modal to grant an app\
        \ access to a user access scope."
      operationId: "apps_permissions_users_request"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "scopes"
        in: "query"
        description: "A comma separated list of user scopes to request for"
        required: false
        type: "string"
        x-exportParamName: "Scopes"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "The user this scope is being requested for"
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "trigger_id"
        in: "query"
        description: "Token used to trigger the request"
        required: false
        type: "string"
        x-exportParamName: "TriggerId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response when used with a user token"
          examples:
            application/json:
              ok: true
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Standard failure response when trigger_id is invalid"
          examples:
            application/json:
              error: "invalid_trigger_id"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.permissions.users.request"
  /apps.uninstall:
    get:
      tags:
      - "apps"
      description: "Uninstalls your app from a workspace."
      operationId: "apps_uninstall"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "client_secret"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "client_id"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "apps.uninstall schema"
            description: "Schema for successful response from apps.uninstall method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_client_id"
                - "bad_client_secret"
                - "client_id_token_mismatch"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "apps.uninstall error schema"
            description: "Schema for error response from apps.uninstall method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/apps.uninstall"
  /auth.revoke:
    get:
      tags:
      - "auth"
      description: "Revokes a token."
      operationId: "auth_revoke"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "test"
        in: "query"
        description: "Setting this parameter to `1` triggers a _testing mode_ where\
          \ the specified token will not actually be revoked."
        required: false
        type: "boolean"
        x-exportParamName: "Test"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              revoked: true
          schema:
            type: "object"
            required:
            - "ok"
            - "revoked"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              revoked:
                type: "boolean"
            title: "auth.revoke schema"
            description: "Schema for successful response from auth.revoke method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "auth.revoke error schema"
            description: "Schema for error response from auth.revoke method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/auth.revoke"
  /auth.test:
    get:
      tags:
      - "auth"
      description: "Checks authentication & identity."
      operationId: "auth_test"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Standard success response when used with a user token"
          examples:
            application/json:
              ok: true
              team: "Subarachnoid Workspace"
              team_id: "T12345678"
              url: "https://subarachnoid.slack.com/"
              user: "grace"
              user_id: "W12345678"
          schema:
            type: "object"
            required:
            - "ok"
            - "team"
            - "team_id"
            - "url"
            - "user"
            - "user_id"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              team:
                type: "string"
              team_id:
                $ref: "#/definitions/defs_team"
              url:
                type: "string"
              user:
                type: "string"
              user_id:
                $ref: "#/definitions/defs_user_id"
            title: "auth.test success schema"
            description: "Schema for successful response auth.test method"
            additionalProperties: {}
        default:
          description: "Standard failure response when used with an invalid token"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "token_revoked"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "auth.test error schema"
            description: "Schema for error response auth.test method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/auth.test"
  /bots.info:
    get:
      tags:
      - "bots"
      description: "Gets information about a bot user."
      operationId: "bots_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "bot"
        in: "query"
        description: "Bot user to get info on"
        required: false
        type: "string"
        x-exportParamName: "Bot"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "When successful, returns bot info by bot ID."
          examples:
            application/json:
              bot:
                app_id: "A161CLERW"
                deleted: false
                icons:
                  image_36: "https://..."
                  image_48: "https://..."
                  image_72: "https://..."
                id: "B061F7JD2"
                name: "beforebot"
                updated: 1449272004
                user_id: "U012ABCDEF"
              ok: true
          schema:
            type: "object"
            required:
            - "bot"
            - "ok"
            properties:
              bot:
                type: "object"
                properties:
                  app_id:
                    $ref: "#/definitions/defs_app_id"
                  deleted:
                    type: "boolean"
                  icons:
                    type: "object"
                    properties:
                      image_36:
                        type: "string"
                        format: "uri"
                      image_48:
                        type: "string"
                        format: "uri"
                      image_72:
                        type: "string"
                        format: "uri"
                    required:
                    - "image_36"
                    - "image_48"
                    - "image_72"
                  id:
                    $ref: "#/definitions/defs_bot_id"
                  name:
                    type: "string"
                  updated:
                    type: "integer"
                  user_id:
                    $ref: "#/definitions/defs_user_id"
                required:
                - "app_id"
                - "deleted"
                - "icons"
                - "id"
                - "name"
                - "updated"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "bots.info schema"
            description: "Schema for successful response from bots.info method"
            additionalProperties: {}
        default:
          description: "When no bot can be found, it returns an error."
          examples:
            application/json:
              error: "bot_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bot_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "bots.info error schema"
            description: "Schema for error response from bots.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/bots.info"
  /channels.archive:
    post:
      tags:
      - "channels"
      description: "Archives a channel."
      operationId: "channels_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.archive success schema"
            description: "Schema for successful response from channels.archive method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "already_archived"
                - "cant_archive_general"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.archive error schema"
            description: "Schema for error response channels.archive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.archive"
  /channels.create:
    post:
      tags:
      - "channels"
      description: "Creates a channel."
      operationId: "channels_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "Name of channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response resulting in a new channel"
          examples:
            application/json:
              channel:
                created: 1502833204
                creator: "U061F7AUR"
                id: "C0DEL09A5"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                last_read: "0000000000.000000"
                members:
                - "U061F7AUR"
                name: "endeavor"
                name_normalized: "endeavor"
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: ""
                topic:
                  creator: ""
                  last_set: 0
                  value: ""
                unread_count: 0
                unread_count_display: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.create error schema"
            description: "Schema for successful response channels.create method"
            additionalProperties: {}
        default:
          description: "Example error response when an invalid name is provided"
          examples:
            application/json:
              detail: "Value passed for `name` contained unallowed special characters."
              error: "invalid_name_specials"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "name_taken"
                - "restricted_action"
                - "no_channel"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "invalid_name"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.create error schema"
            description: "Schema for error response channels.create method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.create"
  /channels.history:
    get:
      tags:
      - "channels"
      description: "Fetches history of messages and events from a channel."
      operationId: "channels_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
        x-optionalDataType: "Bool"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response containing the channel's history"
          examples:
            application/json:
              has_more: false
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                reactions:
                - count: 3
                  name: "space_invader"
                  users:
                  - "U1"
                  - "U2"
                  - "U3"
                - count: 5
                  name: "sweet_potato"
                  users:
                  - "U1"
                  - "U2"
                  - "U3"
                  - "U4"
                  - "U5"
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              - attachments:
                - fallback: "This is an attachment fallback"
                  id: 1
                  text: "Don't get too attached"
                bot_id: "B19LU7CSY"
                subtype: "bot_message"
                text: "Containment unit is 98% full"
                ts: "1503435956.000247"
                type: "message"
                username: "ecto1138"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              is_limited:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.history success schema"
            description: "Schema for successful response channels.history method"
            additionalProperties: {}
        default:
          description: "Error response when the specified channel cannot be found"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_ts_latest"
                - "invalid_ts_oldest"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.history error schema"
            description: "Schema for error response channels.history method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.history"
  /channels.info:
    get:
      tags:
      - "channels"
      description: "Gets information about a channel."
      operationId: "channels_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this channel. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      - name: "channel"
        in: "query"
        description: "Channel to get info on"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                created: 1466025154
                creator: "U0G9QF9C6"
                id: "C1H9RESGL"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                last_read: "1503435939.000101"
                latest:
                  attachments:
                  - fallback: "This is an attachment fallback"
                    id: 1
                    text: "Don't get too attached"
                  bot_id: "B19LU7CSY"
                  subtype: "bot_message"
                  text: "Containment unit is 98% full"
                  ts: "1503435956.000247"
                  type: "message"
                  username: "ecto1138"
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                name: "busting"
                name_normalized: "busting"
                previous_names:
                - "dusting"
                purpose:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "Discuss busting ghosts"
                topic:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "Spiritual containment strategies"
                unread_count: 1
                unread_count_display: 1
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.info success schema"
            description: "Schema for successful response channels.info method"
            additionalProperties: {}
        default:
          description: "Error response when the specified channel cannot be found"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.info error schema"
            description: "Schema for error response channels.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.info"
  /channels.invite:
    post:
      tags:
      - "channels"
      description: "Invites a user to a channel."
      operationId: "channels_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "User to invite to channel."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to invite user to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                created: 1466025154
                creator: "U0G9QF9C6"
                id: "C1H9RESGL"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                last_read: "1503435963.000307"
                latest:
                  subtype: "channel_leave"
                  text: "<@U1QNSQB9U|protobot> has left the channel"
                  ts: "1503435963.000307"
                  type: "message"
                  user: "U1QNSQB9U"
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                name: "busting"
                name_normalized: "busting"
                previous_names: []
                purpose:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "My Purpose"
                topic:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "My Topic"
                unread_count: 0
                unread_count_display: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.invite error schema"
            description: "Schema for successful response channels.invite method"
            additionalProperties: {}
        default:
          description: "A somewhat typical error response"
          examples:
            application/json:
              error: "cant_invite"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "user_not_found"
                - "cant_invite_self"
                - "not_in_channel"
                - "already_in_channel"
                - "is_archived"
                - "cant_invite"
                - "too_many_users"
                - "ura_max_channels"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.invite error schema"
            description: "Schema for error response channels.invite method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.invite"
  /channels.join:
    post:
      tags:
      - "channels"
      description: "Joins a channel, creating it if needed."
      operationId: "channels_join"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "Name of channel to join"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              already_in_channel: true
              channel:
                created: 1466025154
                creator: "U0G9QF9C6"
                id: "C1H9RESGL"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                members:
                - "U0G9QF9C6"
                - "U1QNSQB9U"
                name: "busting"
                name_normalized: "busting"
                previous_names: []
                purpose:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "My Purpose"
                topic:
                  creator: "U0G9QF9C6"
                  last_set: 1503435128
                  value: "My Topic"
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              already_in_channel:
                type: "boolean"
              channel:
                $ref: "#/definitions/objs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.join schema"
            description: "Schema for successful response from channels.join method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "name_taken"
                - "restricted_action"
                - "no_channel"
                - "is_archived"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "invalid_name"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.join error schema"
            description: "Schema for error response from channels.join method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.join"
  /channels.kick:
    post:
      tags:
      - "channels"
      description: "Removes a user from a channel."
      operationId: "channels_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "User to remove from channel."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.kick schema"
            description: "Schema for successful response from channels.kick method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "not_in_channel"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "user_not_found"
                - "cant_kick_self"
                - "not_in_channel"
                - "cant_kick_from_general"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.kick error schema"
            description: "Schema for error response from channels.kick method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.kick"
  /channels.leave:
    post:
      tags:
      - "channels"
      description: "Leaves a channel."
      operationId: "channels_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.leave schema"
            description: "Schema for successful response from channels.leave method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "is_archived"
                - "cant_leave_general"
                - "cant_leave_mandatory_shared_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.leave error schema"
            description: "Schema for error response from channels.leave method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.leave"
  /channels.list:
    get:
      tags:
      - "channels"
      description: "Lists all channels in a Slack team."
      operationId: "channels_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "exclude_members"
        in: "query"
        description: "Exclude the `members` collection from each `channel`"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeMembers"
        x-optionalDataType: "Bool"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "exclude_archived"
        in: "query"
        description: "Exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical cursored success response"
          examples:
            application/json:
              channels:
              - created: 1449709280
                creator: "U0G9QF9C6"
                id: "C0G9QF9GW"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                members:
                - "U0G9QF9C6"
                - "U0G9WFXNZ"
                name: "random"
                name_normalized: "random"
                num_members: 2
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                topic:
                  creator: "U0G9QF9C6"
                  last_set: 1449709352
                  value: "Other stuff"
              - created: 1449709280
                creator: "U0G9QF9C6"
                id: "C0G9QKBBL"
                is_archived: false
                is_channel: true
                is_general: true
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                members:
                - "U0G9QF9C6"
                - "U0G9WFXNZ"
                name: "general"
                name_normalized: "general"
                num_members: 2
                previous_names: []
                purpose:
                  creator: "U0G9QF9C6"
                  last_set: 1449709334
                  value: "To talk about anything!"
                topic:
                  creator: "U0G9QF9C6"
                  last_set: 1449709364
                  value: "Talk about anything!"
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMUg5UkVTR0w="
          schema:
            type: "object"
            required:
            - "channels"
            - "ok"
            properties:
              channels:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_channel"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.list success schema"
            description: "Schema for successful response channels.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "limit_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.list error schema"
            description: "Schema for error response channels.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.list"
  /channels.mark:
    post:
      tags:
      - "channels"
      description: "Sets the read cursor in a channel."
      operationId: "channels_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "formData"
        description: "Channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.mark success schema"
            description: "Schema for successful response channels.mark method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_timestamp"
                - "not_in_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.mark error schema"
            description: "Schema for error response channels.mark method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.mark"
  /channels.rename:
    post:
      tags:
      - "channels"
      description: "Renames a channel."
      operationId: "channels_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "New name for channel."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                created: 1477445146
                creator: "U2U85N1RZ"
                id: "C2U875RJN"
                is_archived: false
                is_channel: true
                is_general: false
                is_member: false
                is_mpim: false
                is_org_shared: false
                is_private: false
                is_shared: false
                members: []
                name: "humans-and-bots"
                name_normalized: "humans-and-bots"
                previous_names:
                - "humans"
                purpose:
                  creator: "U2U85N1RZ"
                  last_set: 1509475801
                  value: "the purpose of this channel is to bring people and robots\
                    \ together in harmony"
                topic:
                  creator: "U2U85N1RZ"
                  last_set: 1509475775
                  value: "here be robots"
                unlinked: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.rename schema"
            description: "Schema for successful response from channels.rename method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_in_channel"
                - "not_authorized"
                - "invalid_name"
                - "name_taken"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.rename error schema"
            description: "Schema for error response from channels.rename method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.rename"
  /channels.replies:
    get:
      tags:
      - "channels"
      description: "Retrieve a thread of messages posted to a channel"
      operationId: "channels_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `channels:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              has_more: false
              messages:
              - last_read: "1509484885.000082"
                replies:
                - ts: "1509484424.000601"
                  user: "U2U85N1RZ"
                - ts: "1509484885.000082"
                  user: "U2U85N1RZ"
                reply_count: 2
                subscribed: true
                text: "This is a channel message"
                thread_ts: "1485913694.000025"
                ts: "1485913694.000025"
                type: "message"
                unread_count: 0
                user: "U2X9P5FEL"
              - parent_user_id: "U2X9P5FEL"
                text: "This is a thread reply"
                thread_ts: "1485913694.000025"
                ts: "1509484424.000601"
                type: "message"
                user: "U2U85N1RZ"
              - parent_user_id: "U2X9P5FEL"
                text: "This is another thread reply"
                thread_ts: "1485913694.000025"
                ts: "1509484885.000082"
                type: "message"
                user: "U2U85N1RZ"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.replies schema"
            description: "Schema for successful response from channels.replies method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "thread_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "thread_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.replies error schema"
            description: "Schema for error response from channels.replies method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.replies"
  /channels.setPurpose:
    post:
      tags:
      - "channels"
      description: "Sets the purpose for a channel."
      operationId: "channels_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "purpose"
        in: "formData"
        description: "The new purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              purpose: "My special purpose"
          schema:
            type: "object"
            required:
            - "ok"
            - "purpose"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              purpose:
                type: "string"
            title: "channels.setPurpose schema"
            description: "Schema for successful response from channels.setPurpose\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.setPurpose error schema"
            description: "Schema for error response from channels.setPurpose method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.setPurpose"
  /channels.setTopic:
    post:
      tags:
      - "channels"
      description: "Sets the topic for a channel."
      operationId: "channels_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic"
        required: false
        type: "string"
        x-exportParamName: "Topic"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              topic: "To picture topicality"
          schema:
            type: "object"
            required:
            - "ok"
            - "topic"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              topic:
                type: "string"
            title: "channels.setTopic schema"
            description: "Schema for successful response from channels.setTopic method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.setTopic error schema"
            description: "Schema for error response from channels.setTopic method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.setTopic"
  /channels.unarchive:
    post:
      tags:
      - "channels"
      description: "Unarchives a channel."
      operationId: "channels_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "channels.unarchive schema"
            description: "Schema for successful response from channels.unarchive method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_archived"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "channels.unarchive error schema"
            description: "Schema for error response from channels.unarchive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/channels.unarchive"
  /chat.delete:
    post:
      tags:
      - "chat"
      description: "Deletes a message."
      operationId: "chat_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "as_user"
        in: "formData"
        description: "Pass true to delete the message as the authed user with `chat:write:user`\
          \ scope. [Bot users](/bot-users) in this context are considered authed users.\
          \ If unused or false, the message will be deleted with `chat:write:bot`\
          \ scope."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to be deleted."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "formData"
        description: "Channel containing the message to be deleted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel: "C024BE91L"
              ok: true
              ts: "1401383885.000061"
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            - "ts"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
              ts:
                $ref: "#/definitions/defs_ts"
            title: "chat.delete success schema"
            description: "Schema for successful response of chat.delete method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "message_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "message_not_found"
                - "channel_not_found"
                - "cant_delete_message"
                - "compliance_exports_prevent_deletion"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.delete error schema"
            description: "Schema for error response from chat.delete method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.delete"
  /chat.deleteScheduledMessage:
    post:
      tags:
      - "chat"
      description: "Deletes a pending scheduled message from the queue."
      operationId: "chat_deleteScheduledMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "chat.deleteScheduledMessage schema"
            description: "Schema for successful response from chat.deleteScheduledMessage\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response if no message is found"
          examples:
            application/json:
              error: "invalid_scheduled_message_id"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_scheduled_message_id"
                - "channel_not_found"
                - "bad_token"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "ekm_access_denied"
                - "missing_scope"
                - "invalid_arguments"
                - "invalid_arg_name"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.deleteScheduledMessage error schema"
            description: "Schema for error response from chat.deleteScheduledMessage\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.deleteScheduledMessage"
  /chat.getPermalink:
    get:
      tags:
      - "chat"
      description: "Retrieve a permalink URL for a specific extant message"
      operationId: "chat_getPermalink"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "message_ts"
        in: "query"
        description: "A message's `ts` value, uniquely identifying it within a channel"
        required: false
        type: "number"
        x-exportParamName: "MessageTs"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "The ID of the conversation or channel containing the message"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response"
          examples:
            application/json:
              channel: "C1H9RESGA"
              ok: true
              permalink: "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            - "permalink"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
              permalink:
                type: "string"
                format: "uri"
            title: "chat.getPermalink success schema"
            description: "Schema for successful response chat.getPermalink"
            additionalProperties: {}
        default:
          description: "Error response when channel cannot be found"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "message_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.getPermalink error schema"
            description: "Schema for error response from chat.getPermalink method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.getPermalink"
  /chat.meMessage:
    post:
      tags:
      - "chat"
      description: "Share a me message into a channel."
      operationId: "chat_meMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "formData"
        description: "Text of the message to send."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to send message to. Can be a public channel, private\
          \ group or IM channel. Can be an encoded ID, or a name."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel: "C024BE7LR"
              ok: true
              ts: "1417671948.000006"
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              ok:
                $ref: "#/definitions/defs_ok_true"
              ts:
                $ref: "#/definitions/defs_ts"
            title: "chat.meMessage schema"
            description: "Schema for successful response from chat.meMessage method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "msg_too_long"
                - "no_text"
                - "rate_limited"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.meMessage error schema"
            description: "Schema for error response from chat.meMessage method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.meMessage"
  /chat.postEphemeral:
    post:
      tags:
      - "chat"
      description: "Sends an ephemeral message to a user in a channel."
      operationId: "chat_postEphemeral"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "formData"
        description: "Provide another message's `ts` value to post this message in\
          \ a thread. Avoid using a reply's `ts` value; use its parent's value instead.\
          \ Ephemeral messages in threads are only shown if there is already an active\
          \ thread."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "blocks"
        in: "formData"
        description: "A JSON-based array of structured blocks, presented as a URL-encoded\
          \ string."
        required: false
        type: "string"
        x-exportParamName: "Blocks"
        x-optionalDataType: "String"
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
        x-optionalDataType: "String"
      - name: "as_user"
        in: "formData"
        description: "Pass true to post the message as the authed user. Defaults to\
          \ true if the chat:write:bot scope is not included. Otherwise, defaults\
          \ to false."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
        x-optionalDataType: "Bool"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "Text of the message to send. See below for an explanation of\
          \ [formatting](#formatting). This field is usually required, unless you're\
          \ providing only `attachments` instead."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "`id` of the user who will receive the ephemeral message. The\
          \ user should be in the channel specified by the `channel` argument."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
        x-optionalDataType: "Bool"
      - name: "channel"
        in: "formData"
        description: "Channel, private group, or IM channel to send message to. Can\
          \ be an encoded ID, or a name."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              message_ts: "1502210682.580145"
              ok: true
          schema:
            type: "object"
            required:
            - "message_ts"
            - "ok"
            properties:
              message_ts:
                $ref: "#/definitions/defs_ts"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "chat.postEphemeral success schema"
            description: "Schema for successful response from chat.postEphemeral method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "user_not_in_channel"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "is_archived"
                - "msg_too_long"
                - "no_text"
                - "restricted_action"
                - "too_many_attachments"
                - "user_not_in_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.postEphemeral error schema"
            description: "Schema for error response from chat.postEphemeral method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.postEphemeral"
  /chat.postMessage:
    post:
      tags:
      - "chat"
      description: "Sends a message to a channel."
      operationId: "chat_postMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
        x-optionalDataType: "String"
      - name: "unfurl_links"
        in: "formData"
        description: "Pass true to enable unfurling of primarily text-based content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlLinks"
        x-optionalDataType: "Bool"
      - name: "text"
        in: "formData"
        description: "Text of the message to send. See below for an explanation of\
          \ [formatting](#formatting). This field is usually required, unless you're\
          \ providing only `attachments` instead. Provide no more than 40,000 characters\
          \ or [risk truncation](/changelog/2018-04-truncating-really-long-messages)."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "unfurl_media"
        in: "formData"
        description: "Pass false to disable unfurling of media content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlMedia"
        x-optionalDataType: "Bool"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
        x-optionalDataType: "String"
      - name: "as_user"
        in: "formData"
        description: "Pass true to post the message as the authed user, instead of\
          \ as a bot. Defaults to false. See [authorship](#authorship) below."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
        x-optionalDataType: "Bool"
      - name: "mrkdwn"
        in: "formData"
        description: "Disable Slack markup parsing by setting to `false`. Enabled\
          \ by default."
        required: false
        type: "boolean"
        x-exportParamName: "Mrkdwn"
        x-optionalDataType: "Bool"
      - name: "channel"
        in: "formData"
        description: "Channel, private group, or IM channel to send message to. Can\
          \ be an encoded ID, or a name. See [below](#channels) for more details."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "username"
        in: "formData"
        description: "Set your bot's user name. Must be used in conjunction with `as_user`\
          \ set to false, otherwise ignored. See [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "blocks"
        in: "formData"
        description: "A JSON-based array of structured blocks, presented as a URL-encoded\
          \ string."
        required: false
        type: "string"
        x-exportParamName: "Blocks"
        x-optionalDataType: "String"
      - name: "icon_emoji"
        in: "formData"
        description: "Emoji to use as the icon for this message. Overrides `icon_url`.\
          \ Must be used in conjunction with `as_user` set to `false`, otherwise ignored.\
          \ See [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "IconEmoji"
        x-optionalDataType: "String"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
        x-optionalDataType: "Bool"
      - name: "reply_broadcast"
        in: "formData"
        description: "Used in conjunction with `thread_ts` and indicates whether reply\
          \ should be made visible to everyone in the channel or conversation. Defaults\
          \ to `false`."
        required: false
        type: "boolean"
        x-exportParamName: "ReplyBroadcast"
        x-optionalDataType: "Bool"
      - name: "thread_ts"
        in: "formData"
        description: "Provide another message's `ts` value to make this message a\
          \ reply. Avoid using a reply's `ts` value; use its parent instead."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "icon_url"
        in: "formData"
        description: "URL to an image to use as the icon for this message. Must be\
          \ used in conjunction with `as_user` set to false, otherwise ignored. See\
          \ [authorship](#authorship) below."
        required: false
        type: "string"
        x-exportParamName: "IconUrl"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel: "C1H9RESGL"
              message:
                attachments:
                - fallback: "This is an attachment's fallback"
                  id: 1
                  text: "This is an attachment"
                bot_id: "B19LU7CSY"
                subtype: "bot_message"
                text: "Here's a message for you"
                ts: "1503435956.000247"
                type: "message"
                username: "ecto1"
              ok: true
              ts: "1503435956.000247"
          schema:
            type: "object"
            required:
            - "channel"
            - "message"
            - "ok"
            - "ts"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              message:
                $ref: "#/definitions/objs_message"
              ok:
                $ref: "#/definitions/defs_ok_true"
              ts:
                $ref: "#/definitions/defs_ts"
            title: "chat.postMessage success schema"
            description: "Schema for successful response of chat.postMessage method"
            additionalProperties: {}
        default:
          description: "Typical error response if too many attachments are included"
          examples:
            application/json:
              error: "too_many_attachments"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "msg_too_long"
                - "no_text"
                - "too_many_attachments"
                - "rate_limited"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.postMessage error schema"
            description: "Schema for error response chat.postMessage method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.postMessage"
  /chat.scheduleMessage:
    post:
      tags:
      - "chat"
      description: "Schedules a message to be sent to a channel."
      operationId: "chat_scheduleMessage"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "formData"
        description: "Provide another message's `ts` value to make this message a\
          \ reply. Avoid using a reply's `ts` value; use its parent instead."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "blocks"
        in: "formData"
        description: "A JSON-based array of structured blocks, presented as a URL-encoded\
          \ string."
        required: false
        type: "string"
        x-exportParamName: "Blocks"
        x-optionalDataType: "String"
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
        x-optionalDataType: "String"
      - name: "unfurl_links"
        in: "formData"
        description: "Pass true to enable unfurling of primarily text-based content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlLinks"
        x-optionalDataType: "Bool"
      - name: "text"
        in: "formData"
        description: "Text of the message to send. See below for an explanation of\
          \ [formatting](#formatting). This field is usually required, unless you're\
          \ providing only `attachments` instead. Provide no more than 40,000 characters\
          \ or [risk truncation](/changelog/2018-04-truncating-really-long-messages)."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
        x-optionalDataType: "Bool"
      - name: "unfurl_media"
        in: "formData"
        description: "Pass false to disable unfurling of media content."
        required: false
        type: "boolean"
        x-exportParamName: "UnfurlMedia"
        x-optionalDataType: "Bool"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "as_user"
        in: "formData"
        description: "Pass true to post the message as the authed user, instead of\
          \ as a bot. Defaults to false. See [authorship](#authorship) below."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
        x-optionalDataType: "Bool"
      - name: "post_at"
        in: "formData"
        description: "Unix EPOCH timestamp of time in future to send the message."
        required: false
        type: "string"
        x-exportParamName: "PostAt"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel, private group, or DM channel to send message to. Can\
          \ be an encoded ID, or a name. See [below](#channels) for more details."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "reply_broadcast"
        in: "formData"
        description: "Used in conjunction with `thread_ts` and indicates whether reply\
          \ should be made visible to everyone in the channel or conversation. Defaults\
          \ to `false`."
        required: false
        type: "boolean"
        x-exportParamName: "ReplyBroadcast"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel: "C1H9RESGL"
              message:
                attachments:
                - fallback: "This is an attachment's fallback"
                  id: 1
                  text: "This is an attachment"
                bot_id: "B19LU7CSY"
                subtype: "bot_message"
                text: "Here's a message for you in the future"
                type: "delayed_message"
                username: "ecto1"
              ok: true
              post_at: "1562180400"
              scheduled_message_id: "Q1298393284"
          schema:
            type: "object"
            required:
            - "channel"
            - "message"
            - "ok"
            - "post_at"
            - "scheduled_message_id"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              message:
                type: "object"
                properties:
                  bot_id:
                    $ref: "#/definitions/defs_bot_id"
                  text:
                    type: "string"
                  type:
                    type: "string"
                  user:
                    $ref: "#/definitions/defs_user_id"
                  username:
                    type: "string"
                required:
                - "bot_id"
                - "text"
                - "type"
                - "user"
              ok:
                $ref: "#/definitions/defs_ok_true"
              post_at:
                type: "integer"
              scheduled_message_id:
                type: "string"
                title: "Scheduled Message ID"
                pattern: "^[Q][A-Z0-9]{8}$"
            title: "chat.scheduleMessage success schema"
            description: "Schema for successful response of chat.scheduleMessage method"
            additionalProperties: {}
        default:
          description: "Typical error response if the `post_at` is invalid (ex. in\
            \ the past or too far into the future)"
          examples:
            application/json:
              error: "time_in_past"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_time"
                - "time_in_past"
                - "time_too_far"
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "msg_too_long"
                - "no_text"
                - "restricted_action"
                - "restricted_action_read_only_channel"
                - "restricted_action_thread_only_channel"
                - "restricted_action_non_threadable_channel"
                - "too_many_attachments"
                - "rate_limited"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "ekm_access_denied"
                - "missing_scope"
                - "invalid_arguments"
                - "invalid_arg_name"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.scheduleMessage error schema"
            description: "Schema for error response chat.scheduleMessage method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.scheduleMessage"
  /chat.scheduledMessages.list:
    get:
      tags:
      - "chat.scheduledMessages"
      - "chat"
      description: "Returns a list of scheduled messages."
      operationId: "chat_scheduledMessages_list"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "For pagination purposes, this is the `cursor` value returned\
          \ from a previous call to `chat.scheduledmessages.list` indicating where\
          \ you want to start this call from."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `none`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Maximum number of original entries to return."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "oldest"
        in: "query"
        description: "A UNIX timestamp of the oldest value in the time range"
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "The channel of the scheduled messages"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "A UNIX timestamp of the latest value in the time range"
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              response_metadata:
                next_cursor: ""
              scheduled_messages:
              - channel_id: "C1H9RESGL"
                date_created: 1551891734
                id: 1298393284
                post_at: 1551991428
          schema:
            type: "object"
            required:
            - "ok"
            - "response_metadata"
            - "scheduled_messages"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                type: "object"
                properties:
                  next_cursor:
                    type: "string"
                required:
                - "next_cursor"
              scheduled_messages:
                type: "array"
                items:
                  type: "object"
                  properties:
                    channel_id:
                      $ref: "#/definitions/defs_channel_id"
                    date_created:
                      type: "integer"
                    id:
                      type: "string"
                      pattern: "^[Q][A-Z0-9]{8}$"
                    post_at:
                      type: "integer"
                  required:
                  - "channel_id"
                  - "date_created"
                  - "id"
                  - "post_at"
            title: "chat.scheduledMessages.list schema"
            description: "Schema for successful response from chat.scheduledMessages.list\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response if the channel passed is invalid"
          examples:
            application/json:
              error: "invalid_channel"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "ekm_access_denied"
                - "missing_scope"
                - "invalid_arguments"
                - "invalid_arg_name"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.scheduledMessages.list error schema"
            description: "Schema for error response from chat.scheduledMessages.list\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.scheduledMessages.list"
  /chat.unfurl:
    post:
      tags:
      - "chat"
      description: "Provide custom unfurl behavior for user-posted URLs"
      operationId: "chat_unfurl"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "user_auth_message"
        in: "formData"
        description: "Provide a simply-formatted string to send as an ephemeral message\
          \ to the user as invitation to authenticate further and enable full unfurling\
          \ behavior"
        required: false
        type: "string"
        x-exportParamName: "UserAuthMessage"
        x-optionalDataType: "String"
      - name: "user_auth_required"
        in: "formData"
        description: "Set to `true` or `1` to indicate the user must install your\
          \ Slack app to trigger unfurls for this domain"
        required: false
        type: "boolean"
        x-exportParamName: "UserAuthRequired"
        x-optionalDataType: "Bool"
      - name: "unfurls"
        in: "formData"
        description: "URL-encoded JSON map with keys set to URLs featured in the the\
          \ message, pointing to their unfurl blocks or message attachments."
        required: false
        type: "string"
        x-exportParamName: "Unfurls"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to add unfurl behavior to."
        required: false
        type: "string"
        x-exportParamName: "Ts"
        x-optionalDataType: "String"
      - name: "user_auth_url"
        in: "formData"
        description: "Send users to this custom URL where they will complete authentication\
          \ in your app to fully trigger unfurling. Value should be properly URL-encoded."
        required: false
        type: "string"
        x-exportParamName: "UserAuthUrl"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `links:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel ID of the message"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical, minimal success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "chat.unfurl success schema"
            description: "Schema for successful response from chat.unfurl method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "cannot_unfurl_url"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "cannot_unfurl_url"
                - "cannot_find_service"
                - "missing_unfurls"
                - "cannot_prompt"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.unfurl error schema"
            description: "Schema for error response from chat.unfurl method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "links:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.unfurl"
  /chat.update:
    post:
      tags:
      - "chat"
      description: "Updates a message."
      operationId: "chat_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "blocks"
        in: "formData"
        description: "A JSON-based array of structured blocks, presented as a URL-encoded\
          \ string."
        required: false
        type: "string"
        x-exportParamName: "Blocks"
        x-optionalDataType: "String"
      - name: "attachments"
        in: "formData"
        description: "A JSON-based array of structured attachments, presented as a\
          \ URL-encoded string. This field is required when not presenting `text`."
        required: false
        type: "string"
        x-exportParamName: "Attachments"
        x-optionalDataType: "String"
      - name: "text"
        in: "formData"
        description: "New text for the message, using the [default formatting rules](/docs/formatting).\
          \ It's not required when presenting `attachments`."
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the message to be updated."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "parse"
        in: "formData"
        description: "Change how messages are treated. Defaults to `client`, unlike\
          \ `chat.postMessage`. See [below](#formatting)."
        required: false
        type: "string"
        x-exportParamName: "Parse"
        x-optionalDataType: "String"
      - name: "as_user"
        in: "formData"
        description: "Pass true to update the message as the authed user. [Bot users](/bot-users)\
          \ in this context are considered authed users."
        required: false
        type: "boolean"
        x-exportParamName: "AsUser"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `chat:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "link_names"
        in: "formData"
        description: "Find and link channel names and usernames. Defaults to `none`.\
          \ See [below](#formatting)."
        required: false
        type: "boolean"
        x-exportParamName: "LinkNames"
        x-optionalDataType: "Bool"
      - name: "channel"
        in: "formData"
        description: "Channel containing the message to be updated."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel: "C024BE91L"
              ok: true
              text: "Updated text you carefully authored"
              ts: "1401383885.000061"
          schema:
            type: "object"
            required:
            - "channel"
            - "message"
            - "ok"
            - "text"
            - "ts"
            properties:
              channel:
                $ref: "#/definitions/defs_channel"
              message:
                type: "object"
                title: "Message object"
                properties:
                  team:
                    $ref: "#/definitions/defs_team"
                  text:
                    type: "string"
                  type:
                    type: "string"
                  user:
                    $ref: "#/definitions/defs_user_id"
                required:
                - "text"
                - "type"
                - "user"
              ok:
                $ref: "#/definitions/defs_ok_true"
              text:
                type: "string"
                title: "Updated message text"
              ts:
                $ref: "#/definitions/defs_ts"
            title: "chat.update success schema"
            description: "Schema for successful response of chat.update method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "cant_update_message"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "message_not_found"
                - "cant_update_message"
                - "channel_not_found"
                - "edit_window_closed"
                - "msg_too_long"
                - "too_many_attachments"
                - "rate_limited"
                - "no_text"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "request_timeout"
                - "invalid_json"
                - "json_not_object"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "chat.update error schema"
            description: "Schema for error response chat.update method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "chat:write:user"
        - "chat:write:bot"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/chat.update"
  /conversations.archive:
    post:
      tags:
      - "conversations"
      description: "Archives a conversation."
      operationId: "conversations_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.archive success schema"
            description: "Schema for successful response conversations.archive method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "not_supported"
                - "channel_not_found"
                - "already_archived"
                - "cant_archive_general"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.archive error schema"
            description: "Schema for error response from conversations.archive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.archive"
  /conversations.close:
    post:
      tags:
      - "conversations"
      description: "Closes a direct message or multi-person direct message."
      operationId: "conversations_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Conversation to close."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              already_closed:
                type: "boolean"
              no_op:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.close success schema"
            description: "Schema for successful response conversations.close method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "channel_not_found"
                - "user_does_not_own_channel"
                - "missing_scope"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.close error schema"
            description: "Schema for error response from conversations.close method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.close"
  /conversations.create:
    post:
      tags:
      - "conversations"
      description: "Initiates a public or private channel-based conversation"
      operationId: "conversations_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user_ids"
        in: "formData"
        description: "**Required** for workspace apps. A list of between 1 and 30\
          \ human users that will be added to the newly-created conversation. This\
          \ argument has no effect when used by classic Slack apps."
        required: false
        type: "string"
        x-exportParamName: "UserIds"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "Name of the public or private channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "is_private"
        in: "formData"
        description: "Create a private channel instead of a public one"
        required: false
        type: "boolean"
        x-exportParamName: "IsPrivate"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "If successful, the command returns a rather stark [conversation\
            \ object](/types/conversation)"
          examples:
            application/json:
              channel:
                created: 1504554479
                creator: "U0123456"
                id: "C0EAQDV4Z"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: false
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                last_read: "0000000000.000000"
                name: "endeavor"
                name_normalized: "endeavor"
                pending_shared: []
                previous_names: []
                priority: 0
                purpose:
                  creator: ""
                  last_set: 0
                  value: ""
                topic:
                  creator: ""
                  last_set: 0
                  value: ""
                unlinked: 0
                unread_count: 0
                unread_count_display: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.create success schema"
            description: "Schema for successful response conversations.create method"
            additionalProperties: {}
        default:
          description: "Typical error response when name already in use"
          examples:
            application/json:
              error: "name_taken"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              detail:
                type: "string"
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "name_taken"
                - "restricted_action"
                - "no_channel"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "invalid_name"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.create error schema"
            description: "Schema for error response from conversations.create method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.create"
  /conversations.history:
    get:
      tags:
      - "conversations"
      description: "Fetches a conversation's history of messages and events."
      operationId: "conversations_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results\
          \ only when either timestamp is specified."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Conversation ID to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response containing a channel's messages"
          examples:
            application/json:
              has_more: true
              messages:
              - text: "I find you punny and would like to smell your nose letter"
                ts: "1512085950.000216"
                type: "message"
                user: "U012AB3CDE"
              - text: "What, you want to smell my shoes better?"
                ts: "1512104434.000490"
                type: "message"
                user: "U061F7AUR"
              ok: true
              pin_count: 0
              response_metadata:
                next_cursor: "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            - "pin_count"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
              pin_count:
                type: "integer"
            title: "conversations.history success schema"
            description: "Schema for successful response from conversations.history\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "missing_scope"
                - "channel_not_found"
                - "invalid_ts_latest"
                - "invalid_ts_oldest"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.history error schema"
            description: "Schema for error response from conversations.history method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:history"
        - "groups:history"
        - "im:history"
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.history"
  /conversations.info:
    get:
      tags:
      - "conversations"
      description: "Retrieve information about a conversation."
      operationId: "conversations_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "include_num_members"
        in: "query"
        description: "Set to `true` to include the member count for the specified\
          \ conversation. Defaults to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeNumMembers"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Conversation ID to learn more about"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this conversation.\
          \ Defaults to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response for a public channel. (Also, a response\
            \ from a private channel and a multi-party IM is very similar to this\
            \ example.)"
          examples:
            application/json:
              channel:
                created: 1449252889
                creator: "W012A3BCD"
                id: "C012AB3CD"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_read_only: false
                is_shared: false
                last_read: "1502126650.228446"
                locale: "en-US"
                name: "general"
                name_normalized: "general"
                pending_shared: []
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                purpose:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                topic:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                unlinked: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.info success schema"
            description: "Schema for successful response conversations.info"
            additionalProperties: {}
        default:
          description: "Typical error response when a channel cannot be found"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "missing_scope"
                - "channel_not_found"
                - "team_added_to_org"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.info error schema"
            description: "Schema for error response from conversations.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.info"
  /conversations.invite:
    post:
      tags:
      - "conversations"
      description: "Invites users to a channel."
      operationId: "conversations_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "users"
        in: "formData"
        description: "A comma separated list of user IDs. Up to 30 users may be listed."
        required: false
        type: "string"
        x-exportParamName: "Users"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "The ID of the public or private channel to invite user(s) to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response when an invitation is extended"
          examples:
            application/json:
              channel:
                created: 1449252889
                creator: "W012A3BCD"
                id: "C012AB3CD"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_read_only: false
                is_shared: false
                last_read: "1502126650.228446"
                locale: "en-US"
                name: "general"
                name_normalized: "general"
                num_members: 23
                pending_shared: []
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                purpose:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                topic:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                unlinked: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.invite error schema"
            description: "Schema for successful response from conversations.invite\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response when an invite is attempted on a conversation\
            \ type that does not support it"
          examples:
            application/json:
              error: "method_not_supported_for_channel_type"
              ok: false
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "user_not_found"
                - "no_user"
                - "cant_invite_self"
                - "not_in_channel"
                - "already_in_channel"
                - "is_archived"
                - "cant_invite"
                - "too_many_users"
                - "ura_max_channels"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              errors:
                type: "array"
                title: "errors is returned when an error associates an user"
                uniqueItems: true
                items:
                  type: "object"
                  properties:
                    error:
                      type: "string"
                      enum:
                      - "method_not_supported_for_channel_type"
                      - "missing_scope"
                      - "channel_not_found"
                      - "user_not_found"
                      - "no_user"
                      - "cant_invite_self"
                      - "not_in_channel"
                      - "already_in_channel"
                      - "is_archived"
                      - "cant_invite"
                      - "too_many_users"
                      - "ura_max_channels"
                      - "not_authed"
                      - "invalid_auth"
                      - "account_inactive"
                      - "user_is_bot"
                      - "user_is_restricted"
                      - "user_is_ultra_restricted"
                      - "invalid_arg_name"
                      - "invalid_array_arg"
                      - "invalid_charset"
                      - "invalid_form_data"
                      - "invalid_post_type"
                      - "missing_post_type"
                      - "invalid_json"
                      - "json_not_object"
                      - "request_timeout"
                      - "upgrade_required"
                      - "team_added_to_org"
                      - "missing_charset"
                      - "superfluous_charset"
                    ok:
                      $ref: "#/definitions/defs_ok_false"
                    user:
                      $ref: "#/definitions/defs_user_id"
                  required:
                  - "error"
                  - "ok"
                minItems: 1
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.invite error schema"
            description: "Schema for error response from conversations.invite method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.invite"
  /conversations.join:
    post:
      tags:
      - "conversations"
      description: "Joins an existing conversation."
      operationId: "conversations_join"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `channels:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to join"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                created: 1449252889
                creator: "U061F7AUR"
                id: "C061EG9SL"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                name: "general"
                name_normalized: "general"
                pending_shared: []
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "For widget discussion"
                topic:
                  creator: ""
                  last_set: 0
                  value: "Which widget do you worry about?"
                unlinked: 0
              ok: true
              response_metadata:
                warnings:
                - "already_in_channel"
              warning: "already_in_channel"
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                type: "object"
                title: "Response metadata"
                properties:
                  warnings:
                    type: "array"
                    uniqueItems: true
                    items:
                      type: "string"
                    minItems: 1
              warning:
                type: "string"
            title: "conversations.join success schema"
            description: "Schema for successful response from conversations.join method"
            additionalProperties: {}
        default:
          description: "Typical error response if the conversation is archived and\
            \ cannot be joined"
          examples:
            application/json:
              error: "is_archived"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "is_archived"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.join error schema"
            description: "Schema for error response from conversations.join method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.join"
  /conversations.kick:
    post:
      tags:
      - "conversations"
      description: "Removes a user from a conversation."
      operationId: "conversations_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "User ID to be removed."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.kick success schema"
            description: "Schema for successful response conversations.kick method"
            additionalProperties: {}
        default:
          description: "Typical error response when you attempt to kick yourself from\
            \ a channel"
          examples:
            application/json:
              error: "cant_kick_self"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "user_not_found"
                - "cant_kick_self"
                - "not_in_channel"
                - "cant_kick_from_general"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.kick error schema"
            description: "Schema for error response conversations.kick method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.kick"
  /conversations.leave:
    post:
      tags:
      - "conversations"
      description: "Leaves a conversation."
      operationId: "conversations_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Conversation to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              not_in_channel:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.leave success schema"
            description: "Schema for successful response from conversations.leave\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response when attempting to leave a workspace's\
            \ \"general\" channel"
          examples:
            application/json:
              error: "cant_leave_general"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "last_member"
                - "missing_scope"
                - "channel_not_found"
                - "is_archived"
                - "cant_leave_general"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.leave error schema"
            description: "Schema for error response from conversations.leave method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.leave"
  /conversations.list:
    get:
      tags:
      - "conversations"
      description: "Lists all channels in a Slack team."
      operationId: "conversations_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached. Must be an integer no larger than 1000."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "exclude_archived"
        in: "query"
        description: "Set to `true` to exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
        x-optionalDataType: "Bool"
      - name: "types"
        in: "query"
        description: "Mix and match channel types by providing a comma-separated list\
          \ of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
        required: false
        type: "string"
        x-exportParamName: "Types"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response with only public channels"
          examples:
            application/json:
              channels:
              - created: 1449252889
                creator: "U012A3CDE"
                id: "C012AB3CD"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                name: "general"
                name_normalized: "general"
                num_members: 4
                pending_shared: []
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "This channel is for team-wide communication and announcements.\
                    \ All team members are in this channel."
                topic:
                  creator: ""
                  last_set: 0
                  value: "Company-wide announcements and work-based matters"
                unlinked: 0
              - created: 1449252889
                creator: "U061F7AUR"
                id: "C061EG9T2"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: false
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                name: "random"
                name_normalized: "random"
                num_members: 4
                pending_shared: []
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                topic:
                  creator: ""
                  last_set: 0
                  value: "Non-work banter and water cooler conversation"
                unlinked: 0
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMDYxRkE1UEI="
          schema:
            type: "object"
            required:
            - "channels"
            - "ok"
            properties:
              channels:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                type: "object"
                properties:
                  next_cursor:
                    type: "string"
                required:
                - "next_cursor"
            title: "conversations.list success schema"
            description: "Schema for successful response from conversations.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "missing_scope"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.list error schema"
            description: "Schema for error response from conversations.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.list"
  /conversations.members:
    get:
      tags:
      - "conversations"
      description: "Retrieve members of a conversation."
      operationId: "conversations_members"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "channel"
        in: "query"
        description: "ID of the conversation to retrieve members for"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical paginated success response"
          examples:
            application/json:
              members:
              - "U023BECGF"
              - "U061F7AUR"
              - "W012A3CDE"
              ok: true
              response_metadata:
                next_cursor: "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
          schema:
            type: "object"
            required:
            - "members"
            - "ok"
            - "response_metadata"
            properties:
              members:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/defs_user_id"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                type: "object"
                properties:
                  next_cursor:
                    type: "string"
                required:
                - "next_cursor"
            title: "conversations.members success schema"
            description: "Schema for successful response conversations.members method"
            additionalProperties: {}
        default:
          description: "Typical error response when an invalid cursor is provided"
          examples:
            application/json:
              error: "invalid_cursor"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_limit"
                - "invalid_cursor"
                - "fetch_members_failed"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "conversations.members error schema"
            description: "Schema for error response conversations.members method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.members"
  /conversations.open:
    post:
      tags:
      - "conversations"
      description: "Opens or resumes a direct message or multi-person direct message."
      operationId: "conversations_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "return_im"
        in: "formData"
        description: "Boolean, indicates you want the full IM channel definition in\
          \ the response."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnIm"
        x-optionalDataType: "Bool"
      - name: "users"
        in: "formData"
        description: "Comma separated lists of users. If only one user is included,\
          \ this creates a 1:1 DM.  The ordering of the users is preserved whenever\
          \ a multi-person direct message is returned. Supply a `channel` when not\
          \ supplying `users`."
        required: false
        type: "string"
        x-exportParamName: "Users"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Resume a conversation by supplying an `im` or `mpim`'s ID. Or\
          \ provide the `users` field instead."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                id: "D069C7QFK"
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              already_open:
                type: "boolean"
              channel:
                $ref: "#/definitions/objs_conversation"
              no_op:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.open success schema"
            description: "Schema for successful response from conversations.open method\
              \ when opening channels, ims, mpims"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "user_not_found"
                - "user_not_visible"
                - "user_disabled"
                - "users_list_not_supplied"
                - "not_enough_users"
                - "too_many_users"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "channel_not_found"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "conversations.open error schema"
            description: "Schema for error response from conversations.open method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.open"
  /conversations.rename:
    post:
      tags:
      - "conversations"
      description: "Renames a conversation."
      operationId: "conversations_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "New name for conversation."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                created: 1449252889
                creator: "W012A3BCD"
                id: "C012AB3CD"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_member: true
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_read_only: false
                is_shared: false
                last_read: "1502126650.228446"
                locale: "en-US"
                name: "general"
                name_normalized: "general"
                num_members: 23
                pending_shared: []
                previous_names:
                - "specifics"
                - "abstractions"
                - "etc"
                purpose:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "This part of the workspace is for fun. Make fun here."
                topic:
                  creator: "W012A3BCD"
                  last_set: 1449709364
                  value: "For public discussion of generalities"
                unlinked: 0
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.rename success schema"
            description: "Schema for successful response from conversations.rename\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response when the calling user is not a member\
            \ of the conversation"
          examples:
            application/json:
              error: "not_in_channel"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_is_restricted"
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "not_in_channel"
                - "not_authorized"
                - "invalid_name"
                - "name_taken"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.rename error schema"
            description: "Schema for error response from conversations.rename method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.rename"
  /conversations.replies:
    get:
      tags:
      - "conversations"
      description: "Retrieve a thread of messages posted to a conversation"
      operationId: "conversations_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results\
          \ only when either timestamp is specified."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "ts"
        in: "query"
        description: "Unique identifier of a thread's parent message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Conversation ID to fetch thread from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              has_more: true
              messages:
              - last_read: "1484678597.521003"
                replies:
                - ts: "1483037603.017503"
                  user: "U061F7AUR"
                - ts: "1483051909.018632"
                  user: "U061F7AUR"
                - ts: "1483125339.020269"
                  user: "U061F7AUR"
                reply_count: 3
                subscribed: true
                text: "island"
                thread_ts: "1482960137.003543"
                ts: "1482960137.003543"
                type: "message"
                unread_count: 0
                user: "U061F7AUR"
              - parent_user_id: "U061F7AUR"
                text: "one island"
                thread_ts: "1482960137.003543"
                ts: "1483037603.017503"
                type: "message"
                user: "U061F7AUR"
              - parent_user_id: "U061F7AUR"
                text: "two island"
                thread_ts: "1482960137.003543"
                ts: "1483051909.018632"
                type: "message"
                user: "U061F7AUR"
              - parent_user_id: "U061F7AUR"
                text: "three for the land"
                thread_ts: "1482960137.003543"
                ts: "1483125339.020269"
                type: "message"
                user: "U061F7AUR"
              ok: true
              response_metadata:
                next_cursor: "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"
          schema:
            type: "object"
            required:
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.replies success schema"
            description: "Schema for successful response from conversations.replies\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "thread_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "missing_scope"
                - "channel_not_found"
                - "thread_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.replies error schema"
            description: "Schema for error response from conversations.replies method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:history"
        - "groups:history"
        - "im:history"
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.replies"
  /conversations.setPurpose:
    post:
      tags:
      - "conversations"
      description: "Sets the purpose for a conversation."
      operationId: "conversations_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "purpose"
        in: "formData"
        description: "A new, specialer purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Conversation to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.setPurpose success schema"
            description: "Schema for successful response from conversations.setPurpose\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.setPurpose error schema"
            description: "Schema for error response from conversations.setPurpose\
              \ method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.setPurpose"
  /conversations.setTopic:
    post:
      tags:
      - "conversations"
      description: "Sets the topic for a conversation."
      operationId: "conversations_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic string. Does not support formatting or linkification."
        required: false
        type: "string"
        x-exportParamName: "Topic"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Conversation to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.setTopic success schema"
            description: "Schema for successful response from conversations.setTopic\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "not_in_channel"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.setTopic error schema"
            description: "Schema for error response from conversations.setTopic method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.setTopic"
  /conversations.unarchive:
    post:
      tags:
      - "conversations"
      description: "Reverses conversation archival."
      operationId: "conversations_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `conversations:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "ID of conversation to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "conversations.unarchive success schema"
            description: "Schema for successful response from conversations.unarchive\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "channel_not_found"
                - "not_archived"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_restricted"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "team_added_to_org"
                - "missing_charset"
                - "superfluous_charset"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "conversations.unarchive error schema"
            description: "Schema for error response from conversations.unarchive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:write"
        - "groups:write"
        - "im:write"
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/conversations.unarchive"
  /dialog.open:
    get:
      tags:
      - "dialog"
      description: "Open a dialog with a user"
      operationId: "dialog_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response is quite minimal."
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "dialog.open schema"
            description: "Schema for successful response from dialog.open method"
            additionalProperties: {}
        default:
          description: "Typical error response, before getting to any possible validation\
            \ errors."
          examples:
            application/json:
              error: "missing_trigger"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "validation_errors"
                - "missing_trigger"
                - "missing_dialog"
                - "trigger_exchanged"
                - "trigger_expired"
                - "invalid_trigger"
                - "app_missing_action_url"
                - "cannot_create_dialog"
                - "failed_sending_dialog"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "dialog.open error schema"
            description: "Schema for error response from dialog.open method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dialog.open"
  /dnd.endDnd:
    post:
      tags:
      - "dnd"
      description: "Ends the current user's Do Not Disturb session immediately."
      operationId: "dnd_endDnd"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "dnd.endDnd schema"
            description: "Schema for successful response from dnd.endDnd method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "unknown_error"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "dnd.endDnd error schema"
            description: "Schema for error response from dnd.endDnd method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.endDnd"
  /dnd.endSnooze:
    post:
      tags:
      - "dnd"
      description: "Ends the current user's snooze mode immediately."
      operationId: "dnd_endSnooze"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "dnd_enabled"
            - "next_dnd_end_ts"
            - "next_dnd_start_ts"
            - "ok"
            - "snooze_enabled"
            properties:
              dnd_enabled:
                type: "boolean"
              next_dnd_end_ts:
                type: "integer"
              next_dnd_start_ts:
                type: "integer"
              ok:
                $ref: "#/definitions/defs_ok_true"
              snooze_enabled:
                type: "boolean"
            title: "dnd.endSnooze schema"
            description: "Schema for successful response from dnd.endSnooze method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "snooze_not_active"
                - "snooze_end_failed"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "dnd.endSnooze error schema"
            description: "Schema for error response from dnd.endSnooze method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.endSnooze"
  /dnd.info:
    get:
      tags:
      - "dnd"
      description: "Retrieves a user's current Do Not Disturb status."
      operationId: "dnd_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `dnd:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "User to fetch status for (defaults to current user)"
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "dnd_enabled"
            - "next_dnd_end_ts"
            - "next_dnd_start_ts"
            - "ok"
            - "snooze_enabled"
            - "snooze_endtime"
            - "snooze_remaining"
            properties:
              dnd_enabled:
                type: "boolean"
              next_dnd_end_ts:
                type: "integer"
              next_dnd_start_ts:
                type: "integer"
              ok:
                $ref: "#/definitions/defs_ok_true"
              snooze_enabled:
                type: "boolean"
              snooze_endtime:
                type: "integer"
              snooze_remaining:
                type: "integer"
            title: "dnd.info schema"
            description: "Schema for successful response from dnd.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "dnd.info error schema"
            description: "Schema for error response from dnd.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "dnd:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.info"
  /dnd.setSnooze:
    post:
      tags:
      - "dnd"
      description: "Turns on Do Not Disturb mode for the current user, or changes\
        \ its duration."
      operationId: "dnd_setSnooze"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "snooze_enabled"
            - "snooze_endtime"
            - "snooze_remaining"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              snooze_enabled:
                type: "boolean"
              snooze_endtime:
                type: "integer"
              snooze_remaining:
                type: "integer"
            title: "dnd.setSnooze schema"
            description: "Schema for successful response from dnd.setSnooze method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "missing_duration"
                - "snooze_failed"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "too_long"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "dnd.setSnooze error schema"
            description: "Schema for error response from dnd.setSnooze method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "dnd:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.setSnooze"
  /dnd.teamInfo:
    get:
      tags:
      - "dnd"
      description: "Retrieves the Do Not Disturb status for up to 50 users on a team."
      operationId: "dnd_teamInfo"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `dnd:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "users"
        in: "query"
        description: "Comma-separated list of users to fetch Do Not Disturb status\
          \ for"
        required: false
        type: "string"
        x-exportParamName: "Users"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              users:
                U023BECGF:
                  dnd_enabled: true
                  next_dnd_end_ts: 1450423800
                  next_dnd_start_ts: 1450387800
                W058CJVAA:
                  dnd_enabled: false
                  next_dnd_end_ts: 1
                  next_dnd_start_ts: 1
          schema:
            type: "object"
            required:
            - "ok"
            - "users"
            properties:
              cached:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
              users:
                type: "object"
                properties: {}
            title: "dnd.teamInfo success schema"
            description: "Schema for successful response from dnd.teamInfo method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "dnd.teamInfo error schema"
            description: "Schema for error response from dnd.teamInfo method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "dnd:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/dnd.teamInfo"
  /emoji.list:
    get:
      tags:
      - "emoji"
      description: "Lists custom emoji for a team."
      operationId: "emoji_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `emoji:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "emoji:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/emoji.list"
  /files.comments.delete:
    post:
      tags:
      - "files.comments"
      - "files"
      description: "Deletes an existing comment on a file."
      operationId: "files_comments_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "id"
        in: "formData"
        description: "The comment to delete."
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to delete a comment from."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Standard success response is very simple"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "files.comments.delete schema"
            description: "Schema for successful response files.comments.delete method"
            additionalProperties: {}
        default:
          description: "Standard failure response when used with an invalid token"
          examples:
            application/json:
              error: "file_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "cant_delete"
                - "comment_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.comments.delete error schema"
            description: "Schema for error response files.comments.delete method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.comments.delete"
  /files.delete:
    post:
      tags:
      - "files"
      description: "Deletes a file."
      operationId: "files_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "ID of file to delete."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "files.delete schema"
            description: "Schema for successful response files.delete method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "file_not_found"
                - "file_deleted"
                - "cant_delete_file"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.delete error schema"
            description: "Schema for error response files.delete method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.delete"
  /files.info:
    get:
      tags:
      - "files"
      description: "Gets information about a team file."
      operationId: "files_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "cursor"
        in: "query"
        description: "Parameter for pagination. File comments are paginated for a\
          \ single file. Set `cursor` equal to the `next_cursor` attribute returned\
          \ by the previous request's `response_metadata`. This parameter is optional,\
          \ but pagination is mandatory: the default value simply fetches the first\
          \ \"page\" of the collection of comments. See [pagination](/docs/pagination)\
          \ for more details."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `files:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "file"
        in: "query"
        description: "Specify a file by providing its ID."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              comments: []
              file:
                channels:
                - "C0T8SE4AU"
                comments_count: 0
                created: 1531763342
                deanimate_gif: "https://.../tedair_deanimate_gif.png"
                display_as_bot: false
                editable: false
                external_type: ""
                filetype: "gif"
                groups: []
                has_rich_preview: false
                id: "F0S43PZDF"
                image_exif_rotation: 1
                ims: []
                is_external: false
                is_public: true
                is_starred: false
                mimetype: "image/gif"
                mode: "hosted"
                name: "tedair.gif"
                original_h: 226
                original_w: 176
                permalink: "https://https://.../tedair.gif"
                permalink_public: "https://.../..."
                pjpeg: "https://.../tedair_pjpeg.jpg"
                pretty_type: "GIF"
                public_url_shared: false
                shares:
                  public:
                    C0T8SE4AU:
                    - channel_name: "file-under"
                      latest_reply: "1531763348.000001"
                      reply_count: 1
                      reply_users:
                      - "U061F7AUR"
                      reply_users_count: 1
                      team_id: "T061EG9R6"
                      thread_ts: "1531763273.000015"
                      ts: "1531763348.000001"
                size: 137531
                thumb_160: "https://.../tedair_=_160.png"
                thumb_360: "https://.../tedair_360.png"
                thumb_360_gif: "https://.../tedair_360.gif"
                thumb_360_h: 226
                thumb_360_w: 176
                thumb_64: "https://.../tedair_64.png"
                thumb_80: "https://.../tedair_80.png"
                timestamp: 1531763342
                title: "tedair.gif"
                url_private: "https://.../tedair.gif"
                url_private_download: "https://.../tedair.gif"
                user: "U061F7AUR"
                username: ""
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMUg5UkVTR0w="
          schema:
            type: "object"
            required:
            - "comments"
            - "file"
            - "ok"
            properties:
              comments:
                $ref: "#/definitions/objs_comments"
              editor:
                $ref: "#/definitions/defs_user_id"
              file:
                $ref: "#/definitions/objs_file"
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
              response_metadata:
                $ref: "#/definitions/objs_response_metadata"
            title: "files.info schema"
            description: "Schema for successful response from files.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "file_not_found"
                - "file_deleted"
                - "timezone_count_failed"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.info error schema"
            description: "Schema for error response from files.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.info"
  /files.list:
    get:
      tags:
      - "files"
      description: "Lists & filters team files."
      operationId: "files_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Filter files appearing in a specific channel, indicated by its\
          \ ID."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "ts_to"
        in: "query"
        description: "Filter files created before this timestamp (inclusive)."
        required: false
        type: "number"
        x-exportParamName: "TsTo"
        x-optionalDataType: "Float32"
      - name: "ts_from"
        in: "query"
        description: "Filter files created after this timestamp (inclusive)."
        required: false
        type: "number"
        x-exportParamName: "TsFrom"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `files:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "Filter files created by a single user."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "types"
        in: "query"
        description: "Filter files by type ([see below](#file_types)). You can pass\
          \ multiple values in the types argument, like `types=spaces,snippets`.The\
          \ default value is `all`, which does not filter the list."
        required: false
        type: "string"
        x-exportParamName: "Types"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              files:
              - channels:
                - "C0T8SE4AU"
                comments_count: 0
                created: 1531763254
                deanimate_gif: "https://.../billair_deanimate_gif.png"
                display_as_bot: false
                editable: false
                external_type: ""
                filetype: "gif"
                groups: []
                id: "F0S43P1CZ"
                image_exif_rotation: 1
                ims: []
                is_external: false
                is_public: true
                mimetype: "image/gif"
                mode: "hosted"
                name: "billair.gif"
                original_h: 226
                original_w: 176
                permalink: "https://https://.../billair.gif"
                permalink_public: "https://.../..."
                pjpeg: "https://.../billair_pjpeg.jpg"
                pretty_type: "GIF"
                public_url_shared: false
                size: 144538
                thumb_160: "https://.../billair_=_160.png"
                thumb_360: "https://.../billair_360.png"
                thumb_360_gif: "https://.../billair_360.gif"
                thumb_360_h: 226
                thumb_360_w: 176
                thumb_64: "https://.../billair_64.png"
                thumb_80: "https://.../billair_80.png"
                timestamp: 1531763254
                title: "billair.gif"
                url_private: "https://.../billair.gif"
                url_private_download: "https://.../billair.gif"
                user: "U061F7AUR"
                username: ""
              - channels:
                - "C0T8SE4AU"
                comments_count: 0
                created: 1531763342
                deanimate_gif: "https://.../tedair_deanimate_gif.png"
                display_as_bot: false
                editable: false
                external_type: ""
                filetype: "gif"
                groups: []
                id: "F0S43PZDF"
                image_exif_rotation: 1
                ims: []
                is_external: false
                is_public: true
                mimetype: "image/gif"
                mode: "hosted"
                name: "tedair.gif"
                original_h: 226
                original_w: 176
                permalink: "https://https://.../tedair.gif"
                permalink_public: "https://.../..."
                pjpeg: "https://.../tedair_pjpeg.jpg"
                pretty_type: "GIF"
                public_url_shared: false
                size: 137531
                thumb_160: "https://.../tedair_=_160.png"
                thumb_360: "https://.../tedair_360.png"
                thumb_360_gif: "https://.../tedair_360.gif"
                thumb_360_h: 226
                thumb_360_w: 176
                thumb_64: "https://.../tedair_64.png"
                thumb_80: "https://.../tedair_80.png"
                timestamp: 1531763342
                title: "tedair.gif"
                url_private: "https://.../tedair.gif"
                url_private_download: "https://.../tedair.gif"
                user: "U061F7AUR"
                username: ""
              ok: true
              paging:
                count: 100
                page: 1
                pages: 1
                total: 2
          schema:
            type: "object"
            required:
            - "files"
            - "ok"
            - "paging"
            properties:
              files:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_file"
                minItems: 0
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
            title: "files.list schema"
            description: "Schema for successful response from files.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "unknown_type"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.list error schema"
            description: "Schema for error response from files.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.list"
  /files.revokePublicURL:
    post:
      tags:
      - "files"
      description: "Revokes public/external sharing access for a file"
      operationId: "files_revokePublicURL"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to revoke"
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "file"
            - "ok"
            properties:
              file:
                $ref: "#/definitions/objs_file"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "files.revokePublicURL schema"
            description: "Schema for successful response from files.revokePublicURL\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "file_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.revokePublicURL error schema"
            description: "Schema for error response from files.revokePublicURL method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.revokePublicURL"
  /files.sharedPublicURL:
    post:
      tags:
      - "files"
      description: "Enables a file for public/external sharing."
      operationId: "files_sharedPublicURL"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to share"
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "file"
            - "ok"
            properties:
              file:
                $ref: "#/definitions/objs_file"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "files.sharedPublicURL schema"
            description: "Schema for successful response from files.sharedPublicURL\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "file_not_found"
                - "not_allowed"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.sharedPublicURL error schema"
            description: "Schema for error response from files.sharedPublicURL method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.sharedPublicURL"
  /files.upload:
    post:
      tags:
      - "files"
      description: "Uploads or creates a file."
      operationId: "files_upload"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "channels"
        in: "formData"
        description: "Comma-separated list of channel names or IDs where the file\
          \ will be shared."
        required: false
        type: "string"
        x-exportParamName: "Channels"
        x-optionalDataType: "String"
      - name: "title"
        in: "formData"
        description: "Title of file."
        required: false
        type: "string"
        x-exportParamName: "Title"
        x-optionalDataType: "String"
      - name: "initial_comment"
        in: "formData"
        description: "The message text introducing the file in specified `channels`."
        required: false
        type: "string"
        x-exportParamName: "InitialComment"
        x-optionalDataType: "String"
      - name: "filetype"
        in: "formData"
        description: "A [file type](/types/file#file_types) identifier."
        required: false
        type: "string"
        x-exportParamName: "Filetype"
        x-optionalDataType: "String"
      - name: "filename"
        in: "formData"
        description: "Filename of file."
        required: false
        type: "string"
        x-exportParamName: "Filename"
        x-optionalDataType: "String"
      - name: "content"
        in: "formData"
        description: "File contents via a POST variable. If omitting this parameter,\
          \ you must provide a `file`."
        required: false
        type: "string"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `files:write:user`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File contents via `multipart/form-data`. If omitting this parameter,\
          \ you must submit `content`."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "thread_ts"
        in: "formData"
        description: "Provide another message's `ts` value to upload this file as\
          \ a reply. Never use a reply's `ts` value; use its parent instead."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Success response after uploading a file to a channel with\
            \ an initial message"
          examples:
            application/json:
              file:
                channels: []
                comments_count: 0
                created: 1532293501
                display_as_bot: false
                editable: false
                external_type: ""
                filetype: "gif"
                groups: []
                has_rich_preview: false
                id: "F0TD00400"
                image_exif_rotation: 1
                ims:
                - "D0L4B9P0Q"
                is_external: false
                is_public: false
                is_starred: false
                mimetype: "image/jpeg"
                mode: "hosted"
                name: "dramacat.gif"
                original_h: 366
                original_w: 526
                permalink: "https://.../dramacat.gif"
                permalink_public: "https://.../More-Path-Components"
                pretty_type: "JPEG"
                public_url_shared: false
                shares:
                  private:
                    D0L4B9P0Q:
                    - reply_count: 0
                      reply_users: []
                      reply_users_count: 0
                      ts: "1532293503.000001"
                size: 43518
                thumb_160: "https://.../dramacat_160.gif"
                thumb_360: "https://.../dramacat_360.gif"
                thumb_360_h: 250
                thumb_360_w: 360
                thumb_480: "https://.../dramacat_480.gif"
                thumb_480_h: 334
                thumb_480_w: 480
                thumb_64: "https://.../dramacat_64.gif"
                thumb_80: "https://.../dramacat_80.gif"
                timestamp: 1532293501
                title: "dramacat"
                url_private: "https://.../dramacat.gif"
                url_private_download: "https://.../dramacat.gif"
                user: "U0L4B9NSU"
                username: ""
              ok: true
          schema:
            type: "object"
            required:
            - "file"
            - "ok"
            properties:
              file:
                $ref: "#/definitions/objs_file"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "files.upload schema"
            description: "Schema for successful response files.upload method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "posting_to_general_channel_denied"
                - "invalid_channel"
                - "file_uploads_disabled"
                - "file_uploads_except_images_disabled"
                - "storage_limit_reached"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "files.upload error schema"
            description: "Schema for error response files.upload method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "files:write:user"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/files.upload"
  /groups.archive:
    post:
      tags:
      - "groups"
      description: "Archives a private channel."
      operationId: "groups_archive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to archive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.archive schema"
            description: "Schema for successful response from groups.archive method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "already_archived"
                - "group_contains_others"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.archive error schema"
            description: "Schema for error response from groups.archive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.archive"
  /groups.create:
    post:
      tags:
      - "groups"
      description: "Creates a private channel."
      operationId: "groups_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "Name of private channel to create"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "group"
            - "ok"
            properties:
              group:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.create success schema"
            description: "Schema for successful response groups.create method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "no_channel"
                - "restricted_action"
                - "name_taken"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "invalid_name"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.create error schema"
            description: "Schema for error response groups.create method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.create"
  /groups.createChild:
    post:
      tags:
      - "groups"
      description: "Clones and archives a private channel."
      operationId: "groups_createChild"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to clone and archive."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "group"
            - "ok"
            properties:
              group:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.createChild schema"
            description: "Schema for successful response from groups.createChild method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "already_archived"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.createChild error schema"
            description: "Schema for error response from groups.createChild method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.createChild"
  /groups.history:
    get:
      tags:
      - "groups"
      description: "Fetches history of messages and events from a private channel."
      operationId: "groups_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
        x-optionalDataType: "Bool"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Private channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              has_more: false
              latest: "1358547726.000003"
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.history success schema"
            description: "Schema for successful response groups.history method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_ts_latest"
                - "invalid_ts_oldest"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "invalid_for_external_shared_channel"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.history error schema"
            description: "Schema for error response groups.history method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.history"
  /groups.info:
    get:
      tags:
      - "groups"
      description: "Gets information about a private channel."
      operationId: "groups_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this group. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      - name: "channel"
        in: "query"
        description: "Private channel to get info on"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "group"
            - "ok"
            properties:
              group:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.info success schema"
            description: "Schema for successful response groups.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "invalid_for_external_shared_channel"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.info error schema"
            description: "Schema for error response groups.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.info"
  /groups.invite:
    post:
      tags:
      - "groups"
      description: "Invites a user to a private channel."
      operationId: "groups_invite"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "User to invite."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to invite user to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "group"
            - "ok"
            properties:
              group:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.invite success schema"
            description: "Schema for successful response groups.invite method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "user_not_found"
                - "cant_invite_self"
                - "is_archived"
                - "cant_invite"
                - "ura_max_channels"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "user_is_bot"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.invite error schema"
            description: "Schema for error response groups.invite method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.invite"
  /groups.kick:
    post:
      tags:
      - "groups"
      description: "Removes a user from a private channel."
      operationId: "groups_kick"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "User to remove from private channel."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to remove user from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.kick schema"
            description: "Schema for successful response from groups.kick method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "user_not_found"
                - "cant_kick_self"
                - "not_in_group"
                - "restricted_action"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.kick error schema"
            description: "Schema for error response from groups.kick method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.kick"
  /groups.leave:
    post:
      tags:
      - "groups"
      description: "Leaves a private channel."
      operationId: "groups_leave"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to leave"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.leave schema"
            description: "Schema for successful response from groups.leave method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "is_archived"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_ultra_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.leave error schema"
            description: "Schema for error response from groups.leave method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.leave"
  /groups.list:
    get:
      tags:
      - "groups"
      description: "Lists private channels that the calling user has access to."
      operationId: "groups_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`\
          \ attribute returned by the previous request's `response_metadata`. This\
          \ parameter is optional, but pagination is mandatory: the default value\
          \ simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination)\
          \ for more details."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "exclude_members"
        in: "query"
        description: "Exclude the `members` from each `group`"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeMembers"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "exclude_archived"
        in: "query"
        description: "Don't return archived private channels."
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
        x-optionalDataType: "Bool"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "groups"
            - "ok"
            properties:
              groups:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_group"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.list success schema"
            description: "Schema for successful response groups.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.list error schema"
            description: "Schema for error response groups.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.list"
  /groups.mark:
    post:
      tags:
      - "groups"
      description: "Sets the read cursor in a private channel."
      operationId: "groups_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "formData"
        description: "Private channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.mark success schema"
            description: "Schema for successful response from groups.mark method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_timestamp"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.mark error schema"
            description: "Schema for error response from groups.mark method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.mark"
  /groups.open:
    post:
      tags:
      - "groups"
      description: "Opens a private channel."
      operationId: "groups_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to open."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.open schema"
            description: "Schema for successful response from groups.open method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.open error schema"
            description: "Schema for error response from groups.open method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.open"
  /groups.rename:
    post:
      tags:
      - "groups"
      description: "Renames a private channel."
      operationId: "groups_rename"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "validate"
        in: "formData"
        description: "Whether to return errors on invalid channel name instead of\
          \ modifying it to meet the specified criteria."
        required: false
        type: "boolean"
        x-exportParamName: "Validate"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "New name for private channel."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to rename"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              channel:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.rename schema"
            description: "Schema for successful response from groups.rename method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_name"
                - "name_taken"
                - "invalid_name_required"
                - "invalid_name_punctuation"
                - "invalid_name_maxlength"
                - "invalid_name_specials"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.rename error schema"
            description: "Schema for error response from groups.rename method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.rename"
  /groups.replies:
    get:
      tags:
      - "groups"
      description: "Retrieve a thread of messages posted to a private channel"
      operationId: "groups_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `groups:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Private channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.replies schema"
            description: "Schema for successful response from groups.replies method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "thread_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.replies error schema"
            description: "Schema for error response from groups.replies method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.replies"
  /groups.setPurpose:
    post:
      tags:
      - "groups"
      description: "Sets the purpose for a private channel."
      operationId: "groups_setPurpose"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "purpose"
        in: "formData"
        description: "The new purpose"
        required: false
        type: "string"
        x-exportParamName: "Purpose"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to set the purpose of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "purpose"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              purpose:
                type: "string"
            title: "groups.setPurpose schema"
            description: "Schema for successful response from groups.setPurpose method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.setPurpose error schema"
            description: "Schema for error response from groups.setPurpose method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.setPurpose"
  /groups.setTopic:
    post:
      tags:
      - "groups"
      description: "Sets the topic for a private channel."
      operationId: "groups_setTopic"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "topic"
        in: "formData"
        description: "The new topic"
        required: false
        type: "string"
        x-exportParamName: "Topic"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to set the topic of"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "topic"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              topic:
                type: "string"
            title: "groups.setTopic schema"
            description: "Schema for successful response from groups.setTopic method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "is_archived"
                - "too_long"
                - "user_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.setTopic error schema"
            description: "Schema for error response from groups.setTopic method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.setTopic"
  /groups.unarchive:
    post:
      tags:
      - "groups"
      description: "Unarchives a private channel."
      operationId: "groups_unarchive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `groups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Private channel to unarchive"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "groups.unarchive schema"
            description: "Schema for successful response from groups.unarchive method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_archived"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "groups.unarchive error schema"
            description: "Schema for error response from groups.unarchive method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "groups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/groups.unarchive"
  /im.close:
    post:
      tags:
      - "im"
      description: "Close a direct message channel."
      operationId: "im_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              already_closed:
                type: "boolean"
              no_op:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.close schema"
            description: "Schema for successful response from im.close method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "user_does_not_own_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "im.close error schema"
            description: "Schema for error response from im.close method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.close"
  /im.history:
    get:
      tags:
      - "im"
      description: "Fetches history of messages and events from direct message channel."
      operationId: "im_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
        x-optionalDataType: "Bool"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Direct message channel to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              has_more: false
              latest: "1358547726.000003"
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.history success schema"
            description: "Schema for successful response from im.history method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_ts_latest"
                - "invalid_ts_oldest"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              needed:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
              provided:
                type: "string"
            title: "im.history error schema"
            description: "Schema for error response from im.history method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.history"
  /im.list:
    get:
      tags:
      - "im"
      description: "Lists direct message channels for the calling user."
      operationId: "im_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ims:
              - created: 1449709280
                id: "D0G9QPY56"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "USLACKBOT"
              - created: 1466692204
                id: "D1KL59A72"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "U0G9QF9C6"
              - created: 1449722883
                id: "D0G9XPFH9"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "U0G9WFXNZ"
              - created: 1452098023
                id: "D0HRHJSF7"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "W0HRJL7CK"
              - created: 1465834222
                id: "D1GD7CHC0"
                is_im: true
                is_org_shared: false
                is_user_deleted: true
                user: "U1GDBDGR3"
              - created: 1468274703
                id: "D1QMF76M9"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "U1QNSQB9U"
              - created: 1502210225
                id: "D6K48KKRN"
                is_im: true
                is_org_shared: false
                is_user_deleted: false
                user: "U6KR7BVFW"
              ok: true
              response_metadata:
                next_cursor: "aW1faWQ6RDBCSDk1RExI="
          schema:
            type: "object"
            required:
            - "ims"
            - "ok"
            properties:
              ims:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_im"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.list success schema"
            description: "Schema for successful response im.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_cursor"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "im.list error schema"
            description: "Schema for error response from im.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.list"
  /im.mark:
    post:
      tags:
      - "im"
      description: "Sets the read cursor in a direct message channel."
      operationId: "im_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `im:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Direct message channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.mark success schema"
            description: "Schema for successful response im.mark method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_timestamp"
                - "not_in_channel"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "im.mark error schema"
            description: "Schema for error response im.mark method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.mark"
  /im.open:
    post:
      tags:
      - "im"
      description: "Opens a direct message channel."
      operationId: "im_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `im:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "return_im"
        in: "formData"
        description: "Boolean, indicates you want the full IM channel definition in\
          \ the response."
        required: false
        type: "boolean"
        x-exportParamName: "ReturnIm"
        x-optionalDataType: "Bool"
      - name: "user"
        in: "formData"
        description: "User to open a direct message channel with."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "include_locale"
        in: "formData"
        description: "Set this to `true` to receive the locale for this im. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                id: "D947RLWRX"
              ok: true
          schema:
            type: "object"
            required:
            - "channel"
            - "ok"
            properties:
              already_open:
                type: "boolean"
              channel:
                type: "object"
                properties:
                  created:
                    type: "string"
                  id:
                    $ref: "#/definitions/defs_dm_id"
                  is_im:
                    type: "boolean"
                  is_open:
                    type: "boolean"
                  last_read:
                    $ref: "#/definitions/defs_ts"
                  latest:
                    $ref: "#/definitions/objs_message"
                  unread_count:
                    type: "number"
                  unread_count_display:
                    type: "number"
                  user:
                    $ref: "#/definitions/defs_user_id"
                required:
                - "id"
              no_op:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.open success schema"
            description: "Schema for successful response from im.open method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "user_not_visible"
                - "user_disabled"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "im.open error schema"
            description: "Schema for error response from im.open method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.open"
  /im.replies:
    get:
      tags:
      - "im"
      description: "Retrieve a thread of messages posted to a direct message conversation"
      operationId: "im_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message"
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `im:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Direct message channel to fetch thread from"
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "im.replies schema"
            description: "Schema for successful response from im.replies method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "thread_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "im.replies error schema"
            description: "Schema for error response from im.replies method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "im:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/im.replies"
  /migration.exchange:
    get:
      tags:
      - "migration"
      description: "For Enterprise Grid workspaces, map local user IDs to global user\
        \ IDs"
      operationId: "migration_exchange"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response when mappings exist for the specified\
            \ user IDs"
          examples:
            application/json:
              enterprise_id: "E1KQTNXE1"
              invalid_user_ids:
              - "U21ABZZXX"
              ok: true
              team_id: "T1KR7PE1W"
              user_id_map:
                U06UBSUN5: "W06M56XJM"
                U06UBSVB3: "W06PUUDLY"
                U06UBSVDX: "W06PUUDMW"
                U06UEB62U: "W06PTT6GH"
                W06UAZ65Q: "W06UAZ65Q"
          schema:
            type: "object"
            required:
            - "enterprise_id"
            - "ok"
            - "team_id"
            properties:
              enterprise_id:
                type: "string"
                title: "The enterprise grid organization ID containing the workspace/team."
              invalid_user_ids:
                type: "array"
                title: "A list of User IDs that cannot be mapped or found"
                items:
                  type: "string"
              ok:
                $ref: "#/definitions/defs_ok_true"
              team_id:
                $ref: "#/definitions/defs_team"
              user_id_map:
                type: "object"
                title: "A mapping of provided user IDs with mapped user IDs"
                properties: {}
            title: "migration.exchange success schema"
            description: "Schema for successful response from migration.exchange method"
            additionalProperties: {}
        default:
          description: "Typical error response when there are no mappings to provide"
          examples:
            application/json:
              error: "not_enterprise_team"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_enterprise_team"
                - "too_many_users"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "migration.exchange error schema"
            description: "Schema for error response from migration.exchange method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "tokens.basic"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/migration.exchange"
  /mpim.close:
    post:
      tags:
      - "mpim"
      description: "Closes a multiparty direct message channel."
      operationId: "mpim_close"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "MPIM to close."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.close schema"
            description: "Schema for successful response from mpim.close method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.close error schema"
            description: "Schema for error response from mpim.close method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.close"
  /mpim.history:
    get:
      tags:
      - "mpim"
      description: "Fetches history of messages and events from a multiparty direct\
        \ message."
      operationId: "mpim_history"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        description: "Number of messages to return, between 1 and 1000."
        required: false
        type: "integer"
        x-exportParamName: "Count"
        x-optionalDataType: "Int32"
      - name: "unreads"
        in: "query"
        description: "Include `unread_count_display` in the output?"
        required: false
        type: "boolean"
        x-exportParamName: "Unreads"
        x-optionalDataType: "Bool"
      - name: "inclusive"
        in: "query"
        description: "Include messages with latest or oldest timestamp in results."
        required: false
        type: "boolean"
        x-exportParamName: "Inclusive"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "oldest"
        in: "query"
        description: "Start of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Oldest"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "query"
        description: "Multiparty direct message to fetch history for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "latest"
        in: "query"
        description: "End of time range of messages to include in results."
        required: false
        type: "number"
        x-exportParamName: "Latest"
        x-optionalDataType: "Float32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              has_more: false
              latest: "1358547726.000003"
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_message"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.history schema"
            description: "Schema for successful response from mpim.history method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_ts_latest"
                - "invalid_ts_oldest"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.history error schema"
            description: "Schema for error response from mpim.history method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.history"
  /mpim.list:
    get:
      tags:
      - "mpim"
      description: "Lists multiparty direct message channels for the calling user."
      operationId: "mpim_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`\
          \ attribute returned by the previous request's `response_metadata`. This\
          \ parameter is optional, but pagination is mandatory: the default value\
          \ simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination)\
          \ for more details."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "groups"
            - "ok"
            properties:
              groups:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_group"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.list schema"
            description: "Schema for successful response from mpim.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.list error schema"
            description: "Schema for error response from mpim.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.list"
  /mpim.mark:
    post:
      tags:
      - "mpim"
      description: "Sets the read cursor in a multiparty direct message channel."
      operationId: "mpim_mark"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "ts"
        in: "formData"
        description: "Timestamp of the most recently seen message."
        required: false
        type: "number"
        x-exportParamName: "Ts"
        x-optionalDataType: "Float32"
      - name: "channel"
        in: "formData"
        description: "multiparty direct message channel to set reading cursor in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.mark schema"
            description: "Schema for successful response from mpim.mark method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "invalid_timestamp"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.mark error schema"
            description: "Schema for error response from mpim.mark method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.mark"
  /mpim.open:
    post:
      tags:
      - "mpim"
      description: "This method opens a multiparty direct message."
      operationId: "mpim_open"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `mpim:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "users"
        in: "formData"
        description: "Comma separated lists of users.  The ordering of the users is\
          \ preserved whenever a MPIM group is returned."
        required: false
        type: "string"
        x-exportParamName: "Users"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              channel:
                id: "D024BFF1M"
              ok: true
          schema:
            type: "object"
            required:
            - "group"
            - "ok"
            properties:
              group:
                $ref: "#/definitions/objs_group"
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.open success schema"
            description: "Schema for successful response from mpim.open method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "users_list_not_supplied"
                - "not_enough_users"
                - "too_many_users"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.open error schema"
            description: "Schema for error response from mpim.open method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.open"
  /mpim.replies:
    get:
      tags:
      - "mpim"
      description: "Retrieve a thread of messages posted to a direct message conversation\
        \ from a multiparty direct message."
      operationId: "mpim_replies"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "thread_ts"
        in: "query"
        description: "Unique identifier of a thread's parent message."
        required: false
        type: "number"
        x-exportParamName: "ThreadTs"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `mpim:history`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Multiparty direct message channel to fetch thread from."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              messages:
              - text: "Hello"
                ts: "1358546515.000008"
                type: "message"
                user: "U2147483896"
              - is_starred: true
                text: "World"
                ts: "1358546515.000007"
                type: "message"
                user: "U2147483896"
              - ts: "1358546515.000007"
                type: "something_else"
              ok: true
          schema:
            type: "object"
            required:
            - "has_more"
            - "messages"
            - "ok"
            properties:
              has_more:
                type: "boolean"
              messages:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "mpim.replies schema"
            description: "Schema for successful response from mpim.replies method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "thread_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "mpim.replies error schema"
            description: "Schema for error response from mpim.replies method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "mpim:history"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/mpim.replies"
  /oauth.access:
    get:
      tags:
      - "oauth"
      description: "Exchanges a temporary OAuth verifier code for an access token."
      operationId: "oauth_access"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "code"
        in: "query"
        description: "The `code` param returned via the OAuth callback."
        required: false
        type: "string"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      - name: "redirect_uri"
        in: "query"
        description: "This must match the originally submitted URI (if one was sent)."
        required: false
        type: "string"
        x-exportParamName: "RedirectUri"
        x-optionalDataType: "String"
      - name: "client_id"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "client_secret"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
        x-optionalDataType: "String"
      - name: "single_channel"
        in: "query"
        description: "Request the user to add your app only to a single channel."
        required: false
        type: "boolean"
        x-exportParamName: "SingleChannel"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Successful user token negotiation for a single scope"
          examples:
            application/json:
              access_token: "xoxp-XXXXXXXX-XXXXXXXX-XXXXX"
              scope: "groups:write"
              team_id: "TXXXXXXXXX"
              team_name: "Wyld Stallyns LLC"
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_client_id"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/oauth.access"
  /oauth.token:
    get:
      tags:
      - "oauth"
      description: "Exchanges a temporary OAuth verifier code for a workspace token."
      operationId: "oauth_token"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "client_secret"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientSecret"
        x-optionalDataType: "String"
      - name: "code"
        in: "query"
        description: "The `code` param returned via the OAuth callback."
        required: false
        type: "string"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      - name: "single_channel"
        in: "query"
        description: "Request the user to add your app only to a single channel."
        required: false
        type: "boolean"
        x-exportParamName: "SingleChannel"
        x-optionalDataType: "Bool"
      - name: "client_id"
        in: "query"
        description: "Issued when you created your application."
        required: false
        type: "string"
        x-exportParamName: "ClientId"
        x-optionalDataType: "String"
      - name: "redirect_uri"
        in: "query"
        description: "This must match the originally submitted URI (if one was sent)."
        required: false
        type: "string"
        x-exportParamName: "RedirectUri"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Success example using a workspace app produces a very different\
            \ kind of response"
          examples:
            application/json:
              access_token: "xoxa-access-token-string"
              app_id: "A012345678"
              app_user_id: "U0AB12ABC"
              authorizing_user_id: "U0HTT3Q0G"
              installer_user_id: "U061F7AUR"
              ok: true
              permissions:
              - resource_id: 0
                resource_type: "channel"
                scopes:
                - "channels:read"
                - "chat:write:user"
              single_channel_id: "C061EG9T2"
              team_id: "T061EG9Z9"
              team_name: "Subarachnoid Workspace"
              token_type: "app"
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_client_id"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "none"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/oauth.token"
  /pins.add:
    post:
      tags:
      - "pins"
      description: "Pins an item to a channel."
      operationId: "pins_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to pin."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to pin."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `pins:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to pin."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to pin the item in."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "pins.add schema"
            description: "Schema for successful response from pins.add method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "channel_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "file_not_found"
                - "file_comment_not_found"
                - "message_not_found"
                - "channel_not_found"
                - "no_item_specified"
                - "already_pinned"
                - "permission_denied"
                - "file_not_shared"
                - "not_pinnable"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "pins.add error schema"
            description: "Schema for error response from pins.add method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "pins:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.add"
  /pins.list:
    get:
      tags:
      - "pins"
      description: "Lists items pinned to a channel."
      operationId: "pins_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `pins:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Channel to get pinned items for."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              items:
              - channel: "C2U86NC6H"
                created: 1508881078
                created_by: "U2U85N1RZ"
                message:
                  permalink: "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151"
                  pinned_to:
                  - "C2U86NC6H"
                  text: "What is the meaning of life?"
                  ts: "1508197641.000151"
                  type: "message"
                  user: "U2U85N1RZ"
                type: "message"
              - channel: "C2U86NC6H"
                created: 1508880991
                created_by: "U2U85N1RZ"
                message:
                  permalink: "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015"
                  pinned_to:
                  - "C2U86NC6H"
                  text: "The meaning of life, the universe, and everything is 42."
                  ts: "1503289197.000015"
                  type: "message"
                  user: "U2U85N1RZ"
                type: "message"
              ok: true
          schema:
            title: "pins.list success schema"
            description: "Schema for successful response from pins.list method"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "channel_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "pins.list error schema"
            description: "Schema for error response from pins.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "pins:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.list"
  /pins.remove:
    post:
      tags:
      - "pins"
      description: "Un-pins an item from a channel."
      operationId: "pins_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to un-pin."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to un-pin."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `pins:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to un-pin."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel where the item is pinned to."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "pins.remove schema"
            description: "Schema for successful response from pins.remove method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "no_pin"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "file_not_found"
                - "file_comment_not_found"
                - "message_not_found"
                - "no_item_specified"
                - "not_pinned"
                - "permission_denied"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_typ"
                - "missing_post_typ"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeou"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "pins.remove error schema"
            description: "Schema for error response from pins.remove method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "pins:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/pins.remove"
  /reactions.add:
    post:
      tags:
      - "reactions"
      description: "Adds a reaction to an item."
      operationId: "reactions_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Reaction (emoji) name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "file_comment"
        in: "formData"
        description: "File comment to add reaction to. Now that [file threads](/changelog/2018-05-file-threads-soon-tread#whats_changed)\
          \ work the way you'd expect, this argument is deprecated. Specify the timestamp\
          \ and channel of the message associated with a file instead."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to add reaction to."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reactions:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to add reaction to. Now that [file threads](/changelog/2018-05-file-threads-soon-tread#whats_changed)\
          \ work the way you'd expect, this argument is deprecated. Specify the timestamp\
          \ and channel of the message associated with a file instead."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel where the message to add reaction to was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "reactions.add schema"
            description: "Schema for successful response from reactions.add method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "already_reacted"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "file_not_found"
                - "file_comment_not_found"
                - "message_not_found"
                - "no_item_specified"
                - "invalid_name"
                - "already_reacted"
                - "too_many_emoji"
                - "too_many_reactions"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reactions.add error schema"
            description: "Schema for error response from reactions.add method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reactions:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.add"
  /reactions.get:
    get:
      tags:
      - "reactions"
      description: "Gets reactions for an item."
      operationId: "reactions_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "full"
        in: "query"
        description: "If true always return the complete reaction list."
        required: false
        type: "boolean"
        x-exportParamName: "Full"
        x-optionalDataType: "Bool"
      - name: "file_comment"
        in: "query"
        description: "File comment to get reactions for."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "query"
        description: "Timestamp of the message to get reactions for."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reactions:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "query"
        description: "File to get reactions for."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "channel"
        in: "query"
        description: "Channel where the message to get reactions for was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              file:
                channels:
                - "C2U7V2YA2"
                comments_count: 1
                created: 1507850315
                groups: []
                id: "F7H0D7ZA4"
                ims: []
                name: "computer.gif"
                reactions:
                - count: 1
                  name: "stuck_out_tongue_winking_eye"
                  users:
                  - "U2U85N1RV"
                timestamp: 1507850315
                title: "computer.gif"
                user: "U2U85N1RV"
              ok: true
              type: "file"
          schema:
            type: "object"
            title: "reactions.get success schema"
            description: "Schema for successful response from reactions.get method"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "file_not_found"
                - "file_comment_not_found"
                - "message_not_found"
                - "no_item_specified"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reactions.get error schema"
            description: "Schema for error response from reactions.get method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reactions:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.get"
  /reactions.list:
    get:
      tags:
      - "reactions"
      description: "Lists reactions made by a user."
      operationId: "reactions_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "full"
        in: "query"
        description: "If true always return the complete reaction list."
        required: false
        type: "boolean"
        x-exportParamName: "Full"
        x-optionalDataType: "Bool"
      - name: "cursor"
        in: "query"
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`\
          \ attribute returned by the previous request's `response_metadata`. This\
          \ parameter is optional, but pagination is mandatory: the default value\
          \ simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination)\
          \ for more details."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reactions:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "user"
        in: "query"
        description: "Show reactions made by this user. Defaults to the authed user."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              items:
              - channel: "C3UKJTQAC"
                message:
                  bot_id: "B4VLRLMKJ"
                  reactions:
                  - count: 1
                    name: "robot_face"
                    users:
                    - "U2U85N1RV"
                  subtype: "bot_message"
                  text: "Hello from Python! :tada:"
                  ts: "1507849573.000090"
                  username: "Shipit Notifications"
                type: "message"
              - comment:
                  comment: "This is a file comment"
                  created: 1508286096
                  id: "Fc7LP08P1U"
                  reactions:
                  - count: 1
                    name: "white_check_mark"
                    users:
                    - "U2U85N1RV"
                  timestamp: 1508286096
                  type: "file_comment"
                  user: "U2U85N1RV"
                file:
                  channels:
                  - "C2U7V2YA2"
                  comments_count: 1
                  created: 1507850315
                  reactions:
                  - count: 1
                    name: "stuck_out_tongue_winking_eye"
                    users:
                    - "U2U85N1RV"
                  title: "computer.gif"
                  user: "U2U85N1RV"
                  username: ""
              - file:
                  channels:
                  - "C2U7V2YA2"
                  comments_count: 1
                  created: 1507850315
                  id: "F7H0D7ZA4"
                  name: "computer.gif"
                  reactions:
                  - count: 1
                    name: "stuck_out_tongue_winking_eye"
                    users:
                    - "U2U85N1RV"
                  size: 1639034
                  title: "computer.gif"
                  user: "U2U85N1RV"
                  username: ""
                type: "file"
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMUg5UkVTR0w="
          schema:
            type: "object"
            required:
            - "items"
            - "ok"
            properties:
              items:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
              response_metadata:
                $ref: "#/definitions/objs_response_metadata"
            title: "reactions.list schema"
            description: "Schema for successful response from reactions.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactiv"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reactions.list error schema"
            description: "Schema for error response from reactions.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reactions:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.list"
  /reactions.remove:
    post:
      tags:
      - "reactions"
      description: "Removes a reaction from an item."
      operationId: "reactions_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "formData"
        description: "Reaction (emoji) name."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "file_comment"
        in: "formData"
        description: "File comment to remove reaction from."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to remove reaction from."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reactions:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to remove reaction from."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel where the message to remove reaction from was posted."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "reactions.remove schema"
            description: "Schema for successful response from reactions.remove method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "no_reaction"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "file_not_found"
                - "file_comment_not_found"
                - "message_not_found"
                - "no_item_specified"
                - "invalid_name"
                - "no_reaction"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reactions.remove error schema"
            description: "Schema for error response from reactions.remove method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reactions:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reactions.remove"
  /reminders.add:
    post:
      tags:
      - "reminders"
      description: "Creates a reminder."
      operationId: "reminders_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "text"
        in: "formData"
        description: "The content of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "The user who will receive the reminder. If no user is specified,\
          \ the reminder will go to user who created it."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "time"
        in: "formData"
        description: "When this reminder should happen: the Unix timestamp (up to\
          \ five years from now), the number of seconds until the reminder (if within\
          \ 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or\
          \ \"every Thursday\")"
        required: false
        type: "string"
        x-exportParamName: "Time"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "reminder"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              reminder:
                $ref: "#/definitions/objs_reminder"
            title: "reminders.add schema"
            description: "Schema for successful response from reminders.add method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "cannot_parse"
                - "user_not_found"
                - "cannot_add_bot"
                - "cannot_add_slackbot"
                - "cannot_add_others"
                - "cannot_add_others_recurring"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reminders.add error schema"
            description: "Schema for error response from reminders.add method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.add"
  /reminders.complete:
    post:
      tags:
      - "reminders"
      description: "Marks a reminder as complete."
      operationId: "reminders_complete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "reminder"
        in: "formData"
        description: "The ID of the reminder to be marked as complete"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "reminders.complete schema"
            description: "Schema for successful response from reminders.complete method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_found"
                - "cannot_complete_recurring"
                - "cannot_complete_others"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reminders.complete error schema"
            description: "Schema for error response from reminders.complete method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.complete"
  /reminders.delete:
    post:
      tags:
      - "reminders"
      description: "Deletes a reminder."
      operationId: "reminders_delete"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `reminders:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "reminder"
        in: "formData"
        description: "The ID of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "reminders.delete schema"
            description: "Schema for successful response from reminders.delete method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reminders.delete error schema"
            description: "Schema for error response from reminders.delete method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reminders:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.delete"
  /reminders.info:
    get:
      tags:
      - "reminders"
      description: "Gets information about a reminder."
      operationId: "reminders_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reminders:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "reminder"
        in: "query"
        description: "The ID of the reminder"
        required: false
        type: "string"
        x-exportParamName: "Reminder"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "reminder"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              reminder:
                $ref: "#/definitions/objs_reminder"
            title: "reminders.info schema"
            description: "Schema for successful response from reminders.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reminders.info error schema"
            description: "Schema for error response from reminders.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reminders:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.info"
  /reminders.list:
    get:
      tags:
      - "reminders"
      description: "Lists all reminders created by or for a given user."
      operationId: "reminders_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `reminders:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "reminders"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              reminders:
                type: "array"
                items:
                  $ref: "#/definitions/objs_reminder"
            title: "reminders.list schema"
            description: "Schema for successful response from reminders.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "reminders.list error schema"
            description: "Schema for error response from reminders.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "reminders:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/reminders.list"
  /rtm.connect:
    get:
      tags:
      - "rtm"
      description: "Starts a Real Time Messaging session."
      operationId: "rtm_connect"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "presence_sub"
        in: "query"
        description: "Only deliver presence events when requested by subscription.\
          \ See [presence subscriptions](/docs/presence-and-status#subscriptions)."
        required: false
        type: "boolean"
        x-exportParamName: "PresenceSub"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `rtm:stream`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "batch_presence_aware"
        in: "query"
        description: "Batch presence deliveries via subscription. Enabling changes\
          \ the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
        required: false
        type: "boolean"
        x-exportParamName: "BatchPresenceAware"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              self:
                id: "U4X318ZMZ"
                name: "robotoverlord"
              team:
                domain: "slackdemo"
                id: "T2U81E2FP"
                name: "SlackDemo"
              url: "wss://..."
          schema:
            type: "object"
            required:
            - "ok"
            - "self"
            - "team"
            - "url"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              self:
                type: "object"
                properties:
                  id:
                    $ref: "#/definitions/defs_user_id"
                  name:
                    type: "string"
                required:
                - "id"
                - "name"
              team:
                type: "object"
                properties:
                  domain:
                    type: "string"
                  id:
                    $ref: "#/definitions/defs_team"
                  name:
                    type: "string"
                required:
                - "domain"
                - "id"
                - "name"
              url:
                type: "string"
                format: "uri"
            title: "rtm.connect schema"
            description: "Schema for successful response from rtm.connect method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "rtm.connect error schema"
            description: "Schema for error response from rtm.connect method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "rtm:stream"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/rtm.connect"
  /search.messages:
    get:
      tags:
      - "search"
      description: "Searches for messages matching a query."
      operationId: "search_messages"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "sort_dir"
        in: "query"
        description: "Change sort direction to ascending (`asc`) or descending (`desc`)."
        required: false
        type: "string"
        x-exportParamName: "SortDir"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Search query."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "Return matches sorted by either `score` or `timestamp`."
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      - name: "count"
        in: "query"
        description: "Pass the number of results you want per \"page\". Maximum of\
          \ `100`."
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `search:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "highlight"
        in: "query"
        description: "Pass a value of `true` to enable query highlight markers (see\
          \ below)."
        required: false
        type: "boolean"
        x-exportParamName: "Highlight"
        x-optionalDataType: "Bool"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              messages:
                matches:
                - channel:
                    id: "C12345678"
                    is_ext_shared: false
                    is_mpim: false
                    is_org_shared: false
                    is_pending_ext_shared: false
                    is_private: false
                    is_shared: false
                    name: "general"
                    pending_shared: []
                  iid: "cb64bdaa-c1e8-4631-8a91-0f78080113e9"
                  permalink: "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015"
                  team: "T12345678"
                  text: "The meaning of life the universe and everything is 42."
                  ts: "1508284197.000015"
                  type: "message"
                  user: "U2U85N1RV"
                  username: "roach"
                - channel:
                    id: "C12345678"
                    is_ext_shared: false
                    is_mpim: false
                    is_org_shared: false
                    is_pending_ext_shared: false
                    is_private: false
                    is_shared: false
                    name: "random"
                    pending_shared: []
                  iid: "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90"
                  permalink: "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236"
                  team: "T12345678"
                  text: "The meaning of life the universe and everything is 101010"
                  ts: "1508795665.000236"
                  type: "message"
                  user: ""
                  username: "robot overlord"
                pagination:
                  first: 1
                  last: 2
                  page: 1
                  page_count: 1
                  per_page: 20
                  total_count: 2
                paging:
                  count: 20
                  page: 1
                  pages: 1
                  total: 2
                total: 2
              ok: true
              query: "The meaning of life the universe and everything"
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "No query passed"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "search:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/search.messages"
  /stars.add:
    post:
      tags:
      - "stars"
      description: "Adds a star to an item."
      operationId: "stars_add"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to add star to."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to add star to."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `stars:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to add star to, or channel where the message to add\
          \ star to was posted (used with `timestamp`)."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to add star to."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "stars.add schema"
            description: "Schema for successful response from stars.add method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "message_not_found"
                - "file_not_found"
                - "file_comment_not_found"
                - "channel_not_found"
                - "no_item_specified"
                - "already_starred"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "stars.add error schema"
            description: "Schema for error response from stars.add method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "stars:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.add"
  /stars.list:
    get:
      tags:
      - "stars"
      description: "Lists stars for a user."
      operationId: "stars_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "cursor"
        in: "query"
        description: "Parameter for pagination. Set `cursor` equal to the `next_cursor`\
          \ attribute returned by the previous request's `response_metadata`. This\
          \ parameter is optional, but pagination is mandatory: the default value\
          \ simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination)\
          \ for more details."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `stars:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "items"
            - "ok"
            properties:
              items:
                type: "array"
                items: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
            title: "stars.list schema"
            description: "Schema for successful response from stars.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "stars.list error schema"
            description: "Schema for error response from stars.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "stars:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.list"
  /stars.remove:
    post:
      tags:
      - "stars"
      description: "Removes a star from an item."
      operationId: "stars_remove"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "file_comment"
        in: "formData"
        description: "File comment to remove star from."
        required: false
        type: "string"
        x-exportParamName: "FileComment"
        x-optionalDataType: "String"
      - name: "timestamp"
        in: "formData"
        description: "Timestamp of the message to remove star from."
        required: false
        type: "number"
        x-exportParamName: "Timestamp"
        x-optionalDataType: "Float32"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `stars:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "channel"
        in: "formData"
        description: "Channel to remove star from, or channel where the message to\
          \ remove star from was posted (used with `timestamp`)."
        required: false
        type: "string"
        x-exportParamName: "Channel"
        x-optionalDataType: "String"
      - name: "file"
        in: "formData"
        description: "File to remove star from."
        required: false
        type: "string"
        x-exportParamName: "File"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "stars.remove schema"
            description: "Schema for successful response from stars.remove method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "bad_timestamp"
                - "message_not_found"
                - "file_not_found"
                - "file_comment_not_found"
                - "channel_not_found"
                - "no_item_specified"
                - "not_starred"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "stars.remove error schema"
            description: "Schema for error response from stars.remove method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "stars:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/stars.remove"
  /team.accessLogs:
    get:
      tags:
      - "team"
      description: "Gets the access logs for the current team."
      operationId: "team_accessLogs"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `admin`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "before"
        in: "query"
        description: "End of time range of logs to include in results (inclusive)."
        required: false
        type: "integer"
        x-exportParamName: "Before"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "This response demonstrates pagination and two access log entries."
          examples:
            application/json:
              logins:
              - count: 1
                country: "US"
                date_first: 1422922864
                date_last: 1422922864
                ip: "127.0.0.1"
                isp: "BigCo ISP"
                region: "CA"
                user_agent: "SlackWeb Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2)\
                  \ AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.35 Safari/537.36"
                user_id: "U45678"
                username: "alice"
              - count: 1
                country: "US"
                date_first: 1422922493
                date_last: 1422922493
                ip: "127.0.0.1"
                isp: "BigCo ISP"
                region: "CA"
                user_agent: "SlackWeb Mozilla/5.0 (iPhone; CPU iPhone OS 8_1_3 like\
                  \ Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0\
                  \ Mobile/12B466 Safari/600.1.4"
                user_id: "U12345"
                username: "white_rabbit"
              ok: true
              paging:
                count: 100
                page: 1
                pages: 1
                total: 2
          schema:
            type: "object"
            required:
            - "logins"
            - "ok"
            - "paging"
            properties:
              logins:
                type: "array"
                uniqueItems: true
                items:
                  type: "object"
                  properties:
                    count:
                      type: "integer"
                    country:
                      type: "string"
                    date_first:
                      type: "integer"
                    date_last:
                      type: "integer"
                    ip:
                      type: "string"
                    isp:
                      type: "string"
                    region:
                      type: "string"
                    user_agent:
                      type: "string"
                    user_id:
                      $ref: "#/definitions/defs_user_id"
                    username:
                      type: "string"
                  required:
                  - "count"
                  - "country"
                  - "date_first"
                  - "date_last"
                  - "ip"
                  - "isp"
                  - "region"
                  - "user_agent"
                  - "user_id"
                  - "username"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
            title: "team.accessLogs schema"
            description: "Schema for successful response from team.accessLogs method"
            additionalProperties: {}
        default:
          description: "A workspace must be on a paid plan to use this method, otherwise\
            \ the `paid_only` error is thrown:"
          examples:
            application/json:
              error: "paid_only"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "paid_only"
                - "over_pagination_limit"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "team.accessLogs error schema"
            description: "Schema for error response from team.accessLogs method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.accessLogs"
  /team.billableInfo:
    get:
      tags:
      - "team"
      description: "Gets billable users information for the current team."
      operationId: "team_billableInfo"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "billable_info"
            - "ok"
            properties:
              billable_info:
                type: "object"
                properties: {}
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "team.billableInfo schema"
            description: "Schema for successful response from team.billableInfo method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "team.billableInfo error schema"
            description: "Schema for error response from team.billableInfo method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.billableInfo"
  /team.info:
    get:
      tags:
      - "team"
      description: "Gets information about the current team."
      operationId: "team_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `team:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "team"
        in: "query"
        description: "Team to get info on, if omitted, will return information about\
          \ the current team. Will only return team that the authenticated token is\
          \ allowed to see through external shared channels"
        required: false
        type: "string"
        x-exportParamName: "Team"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              team:
                domain: "example"
                email_domain: "example.com"
                enterprise_id: "E1234A12AB"
                enterprise_name: "Umbrella Corporation"
                icon:
                  image_102: "https://..."
                  image_132: "https://..."
                  image_34: "https://..."
                  image_44: "https://..."
                  image_68: "https://..."
                  image_88: "https://..."
                  image_default: true
                id: "T12345"
                name: "My Team"
          schema:
            type: "object"
            required:
            - "ok"
            - "team"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              team:
                $ref: "#/definitions/objs_team"
            title: "team.info schema"
            description: "Schema for successful response from team.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revokedno_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "team.info error schema"
            description: "Schema for error response from team.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "team:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.info"
  /team.integrationLogs:
    get:
      tags:
      - "team"
      description: "Gets the integration logs for the current team."
      operationId: "team_integrationLogs"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "count"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Count"
        x-optionalDataType: "String"
      - name: "change_type"
        in: "query"
        description: "Filter logs with this change type. Defaults to all logs."
        required: false
        type: "string"
        x-exportParamName: "ChangeType"
        x-optionalDataType: "String"
      - name: "app_id"
        in: "query"
        description: "Filter logs to this Slack app. Defaults to all logs."
        required: false
        type: "integer"
        x-exportParamName: "AppId"
        x-optionalDataType: "Int32"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `admin`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "Filter logs generated by this user’s actions. Defaults to all\
          \ logs."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "service_id"
        in: "query"
        description: "Filter logs to this service. Defaults to all logs."
        required: false
        type: "integer"
        x-exportParamName: "ServiceId"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "logs"
            - "ok"
            - "paging"
            properties:
              logs:
                type: "array"
                uniqueItems: true
                items:
                  type: "object"
                  properties:
                    admin_app_id:
                      $ref: "#/definitions/defs_app_id"
                    app_id:
                      $ref: "#/definitions/defs_app_id"
                    app_type:
                      type: "string"
                    change_type:
                      type: "string"
                    channel:
                      $ref: "#/definitions/defs_channel"
                    date:
                      type: "string"
                    scope:
                      type: "string"
                    service_id:
                      type: "string"
                    service_type:
                      type: "string"
                    user_id:
                      $ref: "#/definitions/defs_user_id"
                    user_name:
                      type: "string"
                  required:
                  - "app_id"
                  - "app_type"
                  - "change_type"
                  - "date"
                  - "scope"
                  - "user_id"
                  - "user_name"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
              paging:
                $ref: "#/definitions/objs_paging"
            title: "team.integrationLogs schema"
            description: "Schema for successful response from team.integrationLogs\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "team.integrationLogs error schema"
            description: "Schema for error response from team.integrationLogs method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "admin"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.integrationLogs"
  /team.profile.get:
    get:
      tags:
      - "team.profile"
      - "team"
      description: "Retrieve a team's profile."
      operationId: "team_profile_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users.profile:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "visibility"
        in: "query"
        description: "Filter by visibility."
        required: false
        type: "string"
        x-exportParamName: "Visibility"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              profile:
                fields:
                - hint: "Enter the extension to reach your desk"
                  id: "Xf06054AAA"
                  is_hidden: 1
                  label: "Phone extension"
                  ordering: 0
                  type: "text"
                - hint: "When you were born"
                  id: "Xf06054BBB"
                  label: "Date of birth"
                  ordering: 1
                  type: "date"
                - hint: "Enter a link to your Facebook profile"
                  id: "Xf06054CCC"
                  label: "Facebook"
                  ordering: 2
                  type: "link"
                - hint: "Hogwarts, obviously"
                  id: "Xf06054DDD"
                  label: "House"
                  ordering: 3
                  possible_values:
                  - "Gryffindor"
                  - "Hufflepuff"
                  - "Ravenclaw"
                  - "Slytherin"
                  type: "options_list"
                - hint: "Office location (LDAP)"
                  id: "Xf06054EEE"
                  label: "Location"
                  options:
                    is_protected: 1
                  ordering: 4
                  type: "text"
                - hint: "The boss"
                  id: "Xf06054FFF"
                  label: "Manager"
                  ordering: 5
                  type: "user"
          schema:
            type: "object"
            required:
            - "ok"
            - "profile"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              profile:
                type: "object"
                properties:
                  fields:
                    type: "array"
                    uniqueItems: true
                    items:
                      $ref: "#/definitions/objs_team_profile_field"
                    minItems: 1
                required:
                - "fields"
            title: "team.profile.get success schema"
            description: "Schema for successful response from team.profile.get method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_typ"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeou"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "team.profile.get error schema"
            description: "Schema for error response from team.profile.get method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users.profile:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/team.profile.get"
  /usergroups.create:
    post:
      tags:
      - "usergroups"
      description: "Create a User Group"
      operationId: "usergroups_create"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "handle"
        in: "formData"
        description: "A mention handle. Must be unique among channels, users and User\
          \ Groups."
        required: false
        type: "string"
        x-exportParamName: "Handle"
        x-optionalDataType: "String"
      - name: "description"
        in: "formData"
        description: "A short description of the User Group."
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "channels"
        in: "formData"
        description: "A comma separated string of encoded channel IDs for which the\
          \ User Group uses as a default."
        required: false
        type: "string"
        x-exportParamName: "Channels"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "name"
        in: "formData"
        description: "A name for the User Group. Must be unique among User Groups."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroup"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroup:
                $ref: "#/definitions/objs_subteam"
            title: "usergroups.create schema"
            description: "Schema for successful response from usergroups.create method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "permission_denied"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.create error schema"
            description: "Schema for error response from usergroups.create method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.create"
  /usergroups.disable:
    post:
      tags:
      - "usergroups"
      description: "Disable an existing User Group"
      operationId: "usergroups_disable"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to disable."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroup"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroup:
                $ref: "#/definitions/objs_subteam"
            title: "usergroups.disable schema"
            description: "Schema for successful response from usergroups.disable method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "permission_denied"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.disable error schema"
            description: "Schema for error response from usergroups.disable method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.disable"
  /usergroups.enable:
    post:
      tags:
      - "usergroups"
      description: "Enable a User Group"
      operationId: "usergroups_enable"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to enable."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroup"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroup:
                $ref: "#/definitions/objs_subteam"
            title: "usergroups.enable schema"
            description: "Schema for successful response from usergroups.enable method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_require"
                - "fatal_error"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.enable error schema"
            description: "Schema for error response from usergroups.enable method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.enable"
  /usergroups.list:
    get:
      tags:
      - "usergroups"
      description: "List all User Groups for a team"
      operationId: "usergroups_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "include_users"
        in: "query"
        description: "Include the list of users for each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeUsers"
        x-optionalDataType: "Bool"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `usergroups:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "query"
        description: "Include the number of users in each User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "include_disabled"
        in: "query"
        description: "Include disabled User Groups."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeDisabled"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              usergroups:
              - auto_type: "admin"
                created_by: "USLACKBOT"
                date_create: 1446598059
                date_delete: 0
                date_update: 1446670362
                description: "A group of all Administrators on your team."
                handle: "admins"
                id: "S0614TZR7"
                is_external: false
                is_usergroup: true
                name: "Team Admins"
                prefs:
                  channels: []
                  groups: []
                team_id: "T060RNRCH"
                updated_by: "U060RNRCZ"
                user_count: "2"
              - auto_type: "owner"
                created_by: "USLACKBOT"
                date_create: 1446678371
                date_delete: 0
                date_update: 1446678371
                description: "A group of all Owners on your team."
                handle: "owners"
                id: "S06158AV7"
                is_external: false
                is_usergroup: true
                name: "Team Owners"
                prefs:
                  channels: []
                  groups: []
                team_id: "T060RNRCH"
                updated_by: "USLACKBOT"
                user_count: "1"
              - created_by: "U060RNRCZ"
                date_create: 1446746793
                date_delete: 1446748865
                date_update: 1446747767
                description: "Marketing gurus, PR experts and product advocates."
                handle: "marketing-team"
                id: "S0615G0KT"
                is_external: false
                is_usergroup: true
                name: "Marketing Team"
                prefs:
                  channels: []
                  groups: []
                team_id: "T060RNRCH"
                updated_by: "U060RNRCZ"
                user_count: "0"
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroups"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroups:
                type: "array"
                items:
                  $ref: "#/definitions/objs_subteam"
            title: "usergroups.list schema"
            description: "Schema for successful response from usergroups.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_require"
                - "fatal_error"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.list error schema"
            description: "Schema for error response from usergroups.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.list"
  /usergroups.update:
    post:
      tags:
      - "usergroups"
      description: "Update an existing User Group"
      operationId: "usergroups_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "handle"
        in: "formData"
        description: "A mention handle. Must be unique among channels, users and User\
          \ Groups."
        required: false
        type: "string"
        x-exportParamName: "Handle"
        x-optionalDataType: "String"
      - name: "description"
        in: "formData"
        description: "A short description of the User Group."
        required: false
        type: "string"
        x-exportParamName: "Description"
        x-optionalDataType: "String"
      - name: "channels"
        in: "formData"
        description: "A comma separated string of encoded channel IDs for which the\
          \ User Group uses as a default."
        required: false
        type: "string"
        x-exportParamName: "Channels"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to update."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "A name for the User Group. Must be unique among User Groups."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              usergroup:
                created_by: "U060R4BJ4"
                date_create: 1447096577
                date_delete: 0
                date_update: 1447102109
                description: "Marketing gurus, PR experts and product advocates."
                handle: "marketing-team"
                id: "S0616NG6M"
                is_external: false
                is_usergroup: true
                name: "Marketing Team"
                prefs:
                  channels: []
                  groups: []
                team_id: "T060R4BHN"
                updated_by: "U060R4BJ4"
                user_count: 1
                users:
                - "U060R4BJ4"
                - "U060RNRCZ"
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroup"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroup:
                $ref: "#/definitions/objs_subteam"
            title: "usergroups.update schema"
            description: "Schema for successful response from usergroups.update method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "permission_denied"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_require"
                - "fatal_error"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.update error schema"
            description: "Schema for error response from usergroups.update method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.update"
  /usergroups.users.list:
    get:
      tags:
      - "usergroups.users"
      - "usergroups"
      description: "List all users in a User Group"
      operationId: "usergroups_users_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Standard success response when used with a user token"
          examples:
            application/json:
              ok: true
              users:
              - "U060R4BJ4"
              - "W123A4BC5"
          schema:
            type: "object"
            required:
            - "ok"
            - "users"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              users:
                type: "array"
                items:
                  $ref: "#/definitions/defs_user_id"
            title: "usergroups.users.list schema"
            description: "Schema for successful response from usergroups.users.list\
              \ method"
            additionalProperties: {}
        default:
          description: "Standard failure response when used with an invalid token"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_require"
                - "fatal_error"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.users.list error schema"
            description: "Schema for error response from usergroups.users.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.users.list"
  /usergroups.users.update:
    post:
      tags:
      - "usergroups.users"
      - "usergroups"
      description: "Update the list of users for a User Group"
      operationId: "usergroups_users_update"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "users"
        in: "formData"
        description: "A comma separated string of encoded user IDs that represent\
          \ the entire list of users for the User Group."
        required: false
        type: "string"
        x-exportParamName: "Users"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `usergroups:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_count"
        in: "formData"
        description: "Include the number of users in the User Group."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeCount"
        x-optionalDataType: "Bool"
      - name: "usergroup"
        in: "formData"
        description: "The encoded ID of the User Group to update."
        required: false
        type: "string"
        x-exportParamName: "Usergroup"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              usergroup:
                created_by: "U060R4BJ4"
                date_create: 1447096577
                date_delete: 0
                date_update: 1447102109
                description: "Marketing gurus, PR experts and product advocates."
                handle: "marketing-team"
                id: "S0616NG6M"
                is_external: false
                is_usergroup: true
                name: "Marketing Team"
                prefs:
                  channels: []
                  groups: []
                team_id: "T060R4BHN"
                updated_by: "U060R4BJ4"
                user_count: 1
                users:
                - "U060R4BJ4"
                - "U060RNRCZ"
          schema:
            type: "object"
            required:
            - "ok"
            - "usergroup"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              usergroup:
                $ref: "#/definitions/objs_subteam"
            title: "usergroups.users.update schema"
            description: "Schema for successful response from usergroups.users.update\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "permission_denied"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "user_is_restricted"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_require"
                - "fatal_error"
                - "missing_charset"
                - "superfluous_charset"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "usergroups.users.update error schema"
            description: "Schema for error response from usergroups.users.update method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "usergroups:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/usergroups.users.update"
  /users.conversations:
    get:
      tags:
      - "users"
      description: "List conversations the calling user may access."
      operationId: "users_conversations"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `conversations:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the list hasn't been\
          \ reached. Must be an integer no larger than 1000."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "user"
        in: "query"
        description: "Browse conversations by a specific user ID's membership. Non-public\
          \ channels are restricted to those where the calling user shares membership."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "exclude_archived"
        in: "query"
        description: "Set to `true` to exclude archived channels from the list"
        required: false
        type: "boolean"
        x-exportParamName: "ExcludeArchived"
        x-optionalDataType: "Bool"
      - name: "types"
        in: "query"
        description: "Mix and match channel types by providing a comma-separated list\
          \ of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
        required: false
        type: "string"
        x-exportParamName: "Types"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response with only public channels. Note how\
            \ `num_members` and `is_member` are not returned like typical `conversations`\
            \ objects."
          examples:
            application/json:
              channels:
              - created: 1449252889
                creator: "U012A3CDE"
                id: "C012AB3CD"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: true
                is_group: false
                is_im: false
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                name: "general"
                name_normalized: "general"
                pending_shared: []
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "This channel is for team-wide communication and announcements.\
                    \ All team members are in this channel."
                topic:
                  creator: ""
                  last_set: 0
                  value: "Company-wide announcements and work-based matters"
                unlinked: 0
              - created: 1449252889
                creator: "U061F7AUR"
                id: "C061EG9T2"
                is_archived: false
                is_channel: true
                is_ext_shared: false
                is_general: false
                is_group: false
                is_im: false
                is_mpim: false
                is_org_shared: false
                is_pending_ext_shared: false
                is_private: false
                is_shared: false
                name: "random"
                name_normalized: "random"
                pending_shared: []
                previous_names: []
                purpose:
                  creator: ""
                  last_set: 0
                  value: "A place for non-work-related flimflam, faffing, hodge-podge\
                    \ or jibber-jabber you'd prefer to keep out of more focused work-related\
                    \ channels."
                topic:
                  creator: ""
                  last_set: 0
                  value: "Non-work banter and water cooler conversation"
                unlinked: 0
              ok: true
              response_metadata:
                next_cursor: "dGVhbTpDMDYxRkE1UEI="
          schema:
            type: "object"
            required:
            - "channels"
            - "ok"
            properties:
              channels:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_conversation"
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                type: "object"
                properties:
                  next_cursor:
                    type: "string"
                required:
                - "next_cursor"
            title: "users.conversations success schema"
            description: "Schema for successful response from users.conversations\
              \ method. Returned conversation objects do not include `num_members`\
              \ or `is_member`"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "method_not_supported_for_channel_type"
                - "missing_scope"
                - "invalid_types"
                - "invalid_cursor"
                - "invalid_limit"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.conversations error schema"
            description: "Schema for error response from users.conversations method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "channels:read"
        - "groups:read"
        - "im:read"
        - "mpim:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.conversations"
  /users.deletePhoto:
    post:
      tags:
      - "users"
      description: "Delete the user profile photo"
      operationId: "users_deletePhoto"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "users.deletePhoto schema"
            description: "Schema for successful response from users.deletePhoto method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.deletePhoto error schema"
            description: "Schema for error response from users.deletePhoto method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.deletePhoto"
  /users.getPresence:
    get:
      tags:
      - "users"
      description: "Gets user presence information."
      operationId: "users_getPresence"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "User to get presence info on. Defaults to the authed user."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "When requesting information for a different user, this method\
            \ just returns the current presence (either `active` or `away`)."
          examples:
            application/json:
              ok: true
              presence: "active"
          schema:
            type: "object"
            required:
            - "ok"
            - "presence"
            properties:
              auto_away:
                type: "boolean"
              connection_count:
                type: "integer"
              last_activity:
                type: "integer"
              manual_away:
                type: "boolean"
              ok:
                $ref: "#/definitions/defs_ok_true"
              online:
                type: "boolean"
              presence:
                type: "string"
            title: "API method: users.getPresence"
            description: "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.counts error schema"
            description: "Schema for error response users.getPresence method"
            additionalProperties:
              type: "object"
              properties: {}
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.getPresence"
  /users.identity:
    get:
      tags:
      - "users"
      description: "Get a user's identity."
      operationId: "users_identity"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `identity.basic`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "You will receive at a minimum the following information:"
          examples:
            application/json:
              ok: true
              team:
                id: "T0G9PQBBK"
              user:
                id: "U0G9QF9C6"
                name: "Sonny Whether"
          schema:
            title: "users.identity schema"
            description: "Schema for successful response from users.identity method"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "account_inactive"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.identity error schema"
            description: "Schema for error response from users.identity method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "identity.basic"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.identity"
  /users.info:
    get:
      tags:
      - "users"
      description: "Gets information about a user."
      operationId: "users_info"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "query"
        description: "User to get info on"
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for this user. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              user:
                color: "9f69e7"
                deleted: false
                has_2fa: false
                id: "W012A3CDE"
                is_admin: true
                is_app_user: false
                is_bot: false
                is_owner: false
                is_primary_owner: false
                is_restricted: false
                is_ultra_restricted: false
                name: "spengler"
                profile:
                  avatar_hash: "ge3b51ca72de"
                  display_name: "spengler"
                  display_name_normalized: "spengler"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_original: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name: "Egon Spengler"
                  real_name_normalized: "Egon Spengler"
                  status_emoji: ":books:"
                  status_text: "Print is dead"
                  team: "T012AB3C4"
                real_name: "Egon Spengler"
                team_id: "T012AB3C4"
                tz: "America/Los_Angeles"
                tz_label: "Pacific Daylight Time"
                tz_offset: -25200
                updated: 1502138686
          schema:
            type: "object"
            required:
            - "ok"
            - "user"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              user:
                $ref: "#/definitions/objs_user"
            title: "users.info success schema"
            description: "Schema for successful response from users.info method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "user_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "user_not_visible"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.info error schema"
            description: "Schema for error response from users.info method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.info"
  /users.list:
    get:
      tags:
      - "users"
      description: "Lists all users in a Slack team."
      operationId: "users_list"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cursor"
        in: "query"
        description: "Paginate through collections of data by setting the `cursor`\
          \ parameter to a `next_cursor` attribute returned by a previous request's\
          \ `response_metadata`. Default value fetches the first \"page\" of the collection.\
          \ See [pagination](/docs/pagination) for more detail."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "The maximum number of items to return. Fewer than the requested\
          \ number of items may be returned, even if the end of the users list hasn't\
          \ been reached."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "include_locale"
        in: "query"
        description: "Set this to `true` to receive the locale for users. Defaults\
          \ to `false`"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLocale"
        x-optionalDataType: "Bool"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              cache_ts: 1498777272
              members:
              - color: "9f69e7"
                deleted: false
                has_2fa: false
                id: "W012A3CDE"
                is_admin: true
                is_app_user: false
                is_bot: false
                is_owner: false
                is_primary_owner: false
                is_restricted: false
                is_ultra_restricted: false
                name: "spengler"
                profile:
                  avatar_hash: "ge3b51ca72de"
                  display_name: "spengler"
                  display_name_normalized: "spengler"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name: "Egon Spengler"
                  real_name_normalized: "Egon Spengler"
                  status_emoji: ":books:"
                  status_text: "Print is dead"
                  team: "T012AB3C4"
                real_name: "spengler"
                team_id: "T012AB3C4"
                tz: "America/Los_Angeles"
                tz_label: "Pacific Daylight Time"
                tz_offset: -25200
                updated: 1502138686
              - color: "9f69e7"
                deleted: false
                has_2fa: false
                id: "W07QCRPA4"
                is_admin: true
                is_bot: false
                is_owner: false
                is_primary_owner: false
                is_restricted: false
                is_ultra_restricted: false
                name: "glinda"
                profile:
                  avatar_hash: "8fbdd10b41c6"
                  display_name: "Glinda the Fairly Good"
                  display_name_normalized: "Glinda the Fairly Good"
                  email: "glenda@south.oz.coven"
                  first_name: "Glinda"
                  image_1024: "https://a.slack-edge.com...png"
                  image_192: "https://a.slack-edge.com...png"
                  image_24: "https://a.slack-edge.com...png"
                  image_32: "https://a.slack-edge.com...png"
                  image_48: "https://a.slack-edge.com...png"
                  image_512: "https://a.slack-edge.com...png"
                  image_72: "https://a.slack-edge.com...png"
                  image_original: "https://a.slack-edge.com...png"
                  last_name: "Southgood"
                  phone: ""
                  real_name: "Glinda Southgood"
                  real_name_normalized: "Glinda Southgood"
                  skype: ""
                  title: "Glinda the Good"
                real_name: "Glinda Southgood"
                team_id: "T0G9PQBBK"
                tz: "America/Los_Angeles"
                tz_label: "Pacific Daylight Time"
                tz_offset: -25200
                updated: 1480527098
              ok: true
              response_metadata:
                next_cursor: "dXNlcjpVMEc5V0ZYTlo="
          schema:
            type: "object"
            required:
            - "cache_ts"
            - "members"
            - "ok"
            properties:
              cache_ts:
                type: "integer"
              members:
                type: "array"
                uniqueItems: true
                items:
                  $ref: "#/definitions/objs_user"
                minItems: 1
              ok:
                $ref: "#/definitions/defs_ok_true"
              response_metadata:
                $ref: "#/definitions/objs_response_metadata"
            title: "users.list schema"
            description: "Schema for successful response from users.list method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_cursor"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "limit_required"
                - "invalid_cursor"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.list error schema"
            description: "Schema for error response from users.list method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.list"
  /users.lookupByEmail:
    get:
      tags:
      - "users"
      description: "Find a user with an email address."
      operationId: "users_lookupByEmail"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users:read.email`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "email"
        in: "query"
        description: "An email address belonging to a user in the workspace"
        required: false
        type: "string"
        x-exportParamName: "Email"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              user:
                color: "9f69e7"
                deleted: false
                has_2fa: false
                id: "W012A3CDE"
                is_admin: true
                is_app_user: false
                is_bot: false
                is_owner: false
                is_primary_owner: false
                is_restricted: false
                is_ultra_restricted: false
                name: "spengler"
                profile:
                  avatar_hash: "ge3b51ca72de"
                  display_name: "spengler"
                  display_name_normalized: "spengler"
                  email: "spengler@ghostbusters.example.com"
                  image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                  real_name: "Egon Spengler"
                  real_name_normalized: "Egon Spengler"
                  status_emoji: ":books:"
                  status_text: "Print is dead"
                  team: "T012AB3C4"
                real_name: "Egon Spengler"
                team_id: "T012AB3C4"
                tz: "America/Los_Angeles"
                tz_label: "Pacific Daylight Time"
                tz_offset: -25200
                updated: 1502138686
          schema:
            type: "object"
            required:
            - "ok"
            - "user"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              user:
                $ref: "#/definitions/objs_user"
            title: "users.lookupByEmail success schema"
            description: "Schema for successful response from users.lookupByEmail\
              \ method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "users_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "users_not_found"
                - "enterprise_is_restricted"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "no_permission"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.lookupByEmail error schema"
            description: "Schema for error response from users.lookupByEmail method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users:read.email"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.lookupByEmail"
  /users.profile.get:
    get:
      tags:
      - "users.profile"
      - "users"
      description: "Retrieves a user's profile information."
      operationId: "users_profile_get"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "query"
        description: "Authentication token. Requires scope: `users.profile:read`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "include_labels"
        in: "query"
        description: "Include labels for each ID in custom profile fields"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeLabels"
        x-optionalDataType: "Bool"
      - name: "user"
        in: "query"
        description: "User to retrieve profile info for"
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              profile:
                avatar_hash: "ge3b51ca72de"
                display_name: "spengler"
                display_name_normalized: "spengler"
                email: "spengler@ghostbusters.example.com"
                image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_original: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                real_name: "Egon Spengler"
                real_name_normalized: "Egon Spengler"
                status_emoji: ":books:"
                status_expiration: 0
                status_text: "Print is dead"
                team: "T012AB3C4"
          schema:
            type: "object"
            required:
            - "ok"
            - "profile"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              profile:
                $ref: "#/definitions/objs_user_profile"
            title: "users.profile.get schema"
            description: "Schema for successful response from users.profile.get method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "user_not_found"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "user_not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.profile.get error schema"
            description: "Schema for error response from users.profile.get method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users.profile:read"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.profile.get"
  /users.profile.set:
    post:
      tags:
      - "users.profile"
      - "users"
      description: "Set the profile information for a user."
      operationId: "users_profile_set"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "profile"
        in: "formData"
        description: "Collection of key:value pairs presented as a URL-encoded JSON\
          \ hash. At most 50 fields may be set. Each field name is limited to 255\
          \ characters."
        required: false
        type: "string"
        x-exportParamName: "Profile"
        x-optionalDataType: "String"
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "user"
        in: "formData"
        description: "ID of user to change. This argument may only be specified by\
          \ team admins on paid teams."
        required: false
        type: "string"
        x-exportParamName: "User"
        x-optionalDataType: "String"
      - name: "value"
        in: "formData"
        description: "Value to set a single key to. Usable only if `profile` is not\
          \ passed."
        required: false
        type: "string"
        x-exportParamName: "Value"
        x-optionalDataType: "String"
      - name: "name"
        in: "formData"
        description: "Name of a single key to set. Usable only if `profile` is not\
          \ passed."
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
              profile:
                avatar_hash: "ge3b51ca72de"
                display_name: "spengler"
                display_name_normalized: "spengler"
                email: "spengler@ghostbusters.example.com"
                image_192: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_24: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_32: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_48: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_512: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                image_72: "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg"
                real_name: "Egon Spengler"
                real_name_normalized: "Egon Spengler"
                status_emoji: ":books:"
                status_expiration: 0
                status_text: "Print is dead"
                team: "T012AB3C4"
          schema:
            type: "object"
            required:
            - "ok"
            - "profile"
            - "username"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              profile:
                $ref: "#/definitions/objs_user_profile"
              username:
                type: "string"
            title: "users.profile.set schema"
            description: "Schema for successful response from users.profile.set method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_profile"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "reserved_name"
                - "invalid_profile"
                - "profile_set_failed"
                - "not_admin"
                - "not_app_admin"
                - "cannot_update_admin_user"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.profile.set error schema"
            description: "Schema for error response from users.profile.set method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.profile.set"
  /users.setActive:
    post:
      tags:
      - "users"
      description: "Marked a user as active. Deprecated and non-functional."
      operationId: "users_setActive"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            $ref: "#/definitions/Default success template"
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            $ref: "#/definitions/Default success template"
      security:
      - slackAuth:
        - "users:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setActive"
  /users.setPhoto:
    post:
      tags:
      - "users"
      description: "Set the user profile photo"
      operationId: "users_setPhoto"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "image"
        in: "formData"
        description: "File contents via `multipart/form-data`."
        required: false
        type: "string"
        x-exportParamName: "Image"
        x-optionalDataType: "String"
      - name: "crop_w"
        in: "formData"
        description: "Width/height of crop box (always square)"
        required: false
        type: "integer"
        x-exportParamName: "CropW"
        x-optionalDataType: "Int32"
      - name: "token"
        in: "formData"
        description: "Authentication token. Requires scope: `users.profile:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "crop_y"
        in: "formData"
        description: "Y coordinate of top-left corner of crop box"
        required: false
        type: "integer"
        x-exportParamName: "CropY"
        x-optionalDataType: "Int32"
      - name: "crop_x"
        in: "formData"
        description: "X coordinate of top-left corner of crop box"
        required: false
        type: "integer"
        x-exportParamName: "CropX"
        x-optionalDataType: "Int32"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            - "profile"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
              profile:
                type: "object"
                properties:
                  avatar_hash:
                    type: "string"
                    pattern: "^[0-9a-f]{12}$"
                  image_1024:
                    type: "string"
                    format: "uri"
                  image_192:
                    type: "string"
                    format: "uri"
                  image_24:
                    type: "string"
                    format: "uri"
                  image_32:
                    type: "string"
                    format: "uri"
                  image_48:
                    type: "string"
                    format: "uri"
                  image_512:
                    type: "string"
                    format: "uri"
                  image_72:
                    type: "string"
                    format: "uri"
                  image_original:
                    type: "string"
                    format: "uri"
                required:
                - "avatar_hash"
                - "image_1024"
                - "image_192"
                - "image_24"
                - "image_32"
                - "image_48"
                - "image_512"
                - "image_72"
                - "image_original"
            title: "users.setPhoto schema"
            description: "Schema for successful response from users.setPhoto method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              debug_step:
                type: "string"
                description: "possibly DEV/QA only"
              dims:
                type: "string"
                description: "possibly DEV/QA only"
              error:
                type: "string"
                enum:
                - "bad_image"
                - "too_large"
                - "too_many_frames"
                - "not_found"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "user_is_bot"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
              time_ident:
                type: "integer"
                description: "possibly DEV/QA only"
            title: "users.setPhoto error schema"
            description: "Schema for error response from users.setPhoto method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users.profile:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setPhoto"
  /users.setPresence:
    post:
      tags:
      - "users"
      description: "Manually sets user presence."
      operationId: "users_setPresence"
      consumes:
      - "application/x-www-form-urlencoded"
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Authentication token. Requires scope: `users:write`"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "presence"
        in: "formData"
        description: "Either `auto` or `away`"
        required: false
        type: "string"
        x-exportParamName: "Presence"
        x-optionalDataType: "String"
      responses:
        "200":
          description: "Typical success response"
          examples:
            application/json:
              ok: true
          schema:
            type: "object"
            required:
            - "ok"
            properties:
              ok:
                $ref: "#/definitions/defs_ok_true"
            title: "users.setPresence schema"
            description: "Schema for successful response from users.setPresence method"
            additionalProperties: {}
        default:
          description: "Typical error response"
          examples:
            application/json:
              error: "invalid_auth"
              ok: false
          schema:
            type: "object"
            required:
            - "error"
            - "ok"
            properties:
              error:
                type: "string"
                enum:
                - "invalid_presence"
                - "not_authed"
                - "invalid_auth"
                - "account_inactive"
                - "token_revoked"
                - "no_permission"
                - "org_login_required"
                - "invalid_arg_name"
                - "invalid_array_arg"
                - "invalid_charset"
                - "invalid_form_data"
                - "invalid_post_type"
                - "missing_post_type"
                - "team_added_to_org"
                - "invalid_json"
                - "json_not_object"
                - "request_timeout"
                - "upgrade_required"
                - "fatal_error"
              ok:
                $ref: "#/definitions/defs_ok_false"
            title: "users.setPresence error schema"
            description: "Schema for error response from users.setPresence method"
            additionalProperties: {}
      security:
      - slackAuth:
        - "users:write"
      externalDocs:
        description: "API method documentation"
        url: "https://api.slack.com/methods/users.setPresence"
securityDefinitions:
  slackAuth:
    type: "oauth2"
    authorizationUrl: "https://slack.com/oauth/authorize"
    tokenUrl: "https://slack.com/api/oauth.access"
    flow: "accessCode"
    scopes:
      admin: "admin"
      admin.users:write: "admin.users:write"
      bot: "Bot user scope"
      channels:history: "channels:history"
      channels:read: "channels:read"
      channels:write: "channels:write"
      chat:write: "chat:write"
      chat:write:bot: "Author messages as a bot"
      chat:write:user: "chat:write:user"
      conversations:history: "conversations:history"
      conversations:read: "conversations:read"
      conversations:write: "conversations:write"
      dnd:read: "dnd:read"
      dnd:write: "dnd:write"
      emoji:read: "emoji:read"
      files:read: "files:read"
      files:write:user: "files:write:user"
      groups:history: "groups:history"
      groups:read: "groups:read"
      groups:write: "groups:write"
      identity.basic: "identity.basic"
      im:history: "im:history"
      im:read: "im:read"
      im:write: "im:write"
      links:write: "links:write"
      mpim:history: "mpim:history"
      mpim:read: "mpim:read"
      mpim:write: "mpim:write"
      none: "No scope required"
      pins:read: "pins:read"
      pins:write: "pins:write"
      reactions:read: "reactions:read"
      reactions:write: "reactions:write"
      reminders:read: "reminders:read"
      reminders:write: "reminders:write"
      rtm:stream: "rtm:stream"
      search:read: "search:read"
      stars:read: "stars:read"
      stars:write: "stars:write"
      team:read: "team:read"
      tokens.basic: "tokens.basic"
      usergroups:read: "usergroups:read"
      usergroups:write: "usergroups:write"
      users.profile:read: "users.profile:read"
      users.profile:write: "users.profile:write"
      users:read: "users:read"
      users:read.email: "users:read.email"
      users:write: "users:write"
definitions:
  blocks:
    title: "Block Kit blocks"
    type: "array"
    description: "This is a very loose definition, in the future, we'll populate this\
      \ with deeper schema in this definition namespace."
    items:
      $ref: "#/definitions/blocks_inner"
  defs_app_id:
    type: "string"
    title: "App ID"
    pattern: "^A[A-Z0-9]{8}$"
  defs_bot_id:
    type: "string"
    title: "Bot User ID"
    pattern: "^B[A-Z0-9]{8}$"
  defs_channel:
    type: "string"
    title: "Channel-like conversation ID"
    pattern: "^[CGD][A-Z0-9]{8}$"
  defs_channel_id:
    type: "string"
    title: "Channel ID"
    pattern: "^[C][A-Z0-9]{8}$"
  defs_channel_name:
    type: "string"
    title: "Name of a channel"
  defs_comment_id:
    type: "string"
    title: "File Comment ID"
    pattern: "^Fc[A-Z0-9]{8}$"
  defs_dm_id:
    type: "string"
    title: "Direct Message Channel ID"
    pattern: "^[D][A-Z0-9]{8}$"
  defs_enterprise_id:
    type: "string"
    title: "Enterprise ID"
    pattern: "^[E][A-Z0-9]{8}$"
  defs_enterprise_name:
    type: "string"
    title: "Name of the enterprise org"
  defs_enterprise_user_id:
    type: "string"
    title: "Enterprise User ID"
    pattern: "^[W][A-Z0-9]{8}$"
  defs_file_id:
    type: "string"
    title: "File ID"
    pattern: "^[F][A-Z0-9]{8}$"
  defs_group_id:
    type: "string"
    title: "Private Channel ID"
    pattern: "^[G][A-Z0-9]{8}$"
  defs_ok_false:
    type: "boolean"
    title: "default failure response"
    enum:
    - "false"
  defs_ok_true:
    type: "boolean"
    title: "default success response"
    enum:
    - "true"
  defs_pinned_info:
    type: "object"
    title: "Info for a pinned item"
    additionalProperties:
      type: "object"
      properties:
        pinned_by:
          $ref: "#/definitions/defs_user_id"
        pinned_ts:
          type: "integer"
      required:
      - "pinned_by"
      - "pinned_ts"
  defs_reminder_id:
    type: "string"
    title: "Reminder ID"
    pattern: "^Rm[A-Z0-9]{8}$"
  defs_subteam_id:
    type: "string"
    title: "Subteam ID"
    pattern: "^S[A-Z0-9]{8}$"
  defs_team:
    type: "string"
    title: "Team ID"
    pattern: "^[T][A-Z0-9]{8}$"
  defs_topic_purpose_creator:
    type: "string"
    title: "User ID or empty string, used for topic and purpose creation"
    pattern: "^[UW][A-Z0-9]{8}$|^$"
  defs_ts:
    type: "string"
    title: "Timestamp in format 0123456789.012345"
    pattern: "^\\d{10}\\.\\d{6}$"
  defs_user_id:
    type: "string"
    title: "User ID"
    pattern: "^[UW][A-Z0-9]{8}$"
  defs_workspace_id:
    type: "string"
    title: "Team or Enterprise ID"
    pattern: "^[TE][A-Z0-9]{8}$"
  objs_channel:
    type: "object"
    required:
    - "created"
    - "creator"
    - "id"
    - "is_channel"
    - "is_mpim"
    - "is_org_shared"
    - "is_private"
    - "is_shared"
    - "members"
    - "name"
    - "name_normalized"
    - "purpose"
    - "topic"
    properties:
      accepted_user:
        $ref: "#/definitions/defs_user_id"
      created:
        type: "integer"
      creator:
        $ref: "#/definitions/defs_user_id"
      id:
        $ref: "#/definitions/defs_channel_id"
      is_archived:
        type: "boolean"
      is_channel:
        type: "boolean"
      is_general:
        type: "boolean"
      is_member:
        type: "boolean"
      is_moved:
        type: "integer"
      is_mpim:
        type: "boolean"
      is_org_shared:
        type: "boolean"
      is_pending_ext_shared:
        type: "boolean"
      is_private:
        type: "boolean"
      is_read_only:
        type: "boolean"
      is_shared:
        type: "boolean"
      last_read:
        $ref: "#/definitions/defs_ts"
      latest: {}
      members:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_user_id"
        minItems: 0
      name:
        type: "string"
      name_normalized:
        type: "string"
      num_members:
        type: "integer"
      pending_shared:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_team"
        minItems: 0
      previous_names:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_channel_name"
        minItems: 0
      priority:
        type: "number"
      purpose:
        $ref: "#/definitions/objs_channel_purpose"
      topic:
        $ref: "#/definitions/objs_channel_purpose"
      unlinked:
        type: "integer"
        title: "Field to determine whether a channel has ever been shared/disconnected\
          \ in the past"
      unread_count:
        type: "integer"
      unread_count_display:
        type: "integer"
    title: "Channel Object"
    additionalProperties: {}
  objs_comment:
    type: "object"
    required:
    - "comment"
    - "created"
    - "id"
    - "is_intro"
    - "timestamp"
    - "user"
    properties:
      comment:
        type: "string"
      created:
        type: "integer"
      id:
        $ref: "#/definitions/defs_comment_id"
      is_intro:
        type: "boolean"
      is_starred:
        type: "boolean"
      num_stars:
        type: "integer"
      pinned_info:
        $ref: "#/definitions/defs_pinned_info"
      pinned_to:
        type: "array"
        items:
          $ref: "#/definitions/defs_channel"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      timestamp:
        type: "integer"
      user:
        $ref: "#/definitions/defs_user_id"
    title: "File Comment Object"
    additionalProperties: {}
  objs_comments:
    title: "file comments object"
    type: "array"
    items: {}
  objs_conversation: {}
  objs_enterprise_user:
    type: "object"
    required:
    - "enterprise_id"
    - "enterprise_name"
    - "id"
    - "is_admin"
    - "is_owner"
    - "teams"
    properties:
      enterprise_id:
        $ref: "#/definitions/defs_enterprise_id"
      enterprise_name:
        $ref: "#/definitions/defs_enterprise_name"
      id:
        $ref: "#/definitions/defs_enterprise_user_id"
      is_admin:
        type: "boolean"
      is_owner:
        type: "boolean"
      teams:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_team"
        minItems: 1
    additionalProperties: {}
  objs_file:
    type: "object"
    properties:
      channels:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_channel_id"
      comments_count:
        type: "integer"
      created:
        type: "integer"
      display_as_bot:
        type: "boolean"
      editable:
        type: "boolean"
      editor:
        $ref: "#/definitions/defs_user_id"
      external_id:
        type: "string"
      external_type:
        type: "string"
      external_url:
        type: "string"
        format: "uri"
      filetype:
        type: "string"
      groups:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_group_id"
      has_rich_preview:
        type: "boolean"
      id:
        $ref: "#/definitions/defs_file_id"
      image_exif_rotation:
        type: "integer"
      ims:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_dm_id"
      is_external:
        type: "boolean"
      is_public:
        type: "boolean"
      is_starred:
        type: "boolean"
      is_tombstoned:
        type: "boolean"
      last_editor:
        $ref: "#/definitions/defs_user_id"
      mimetype:
        type: "string"
      mode:
        type: "string"
      name:
        type: "string"
      num_stars:
        type: "integer"
      original_h:
        type: "integer"
      original_w:
        type: "integer"
      permalink:
        type: "string"
        format: "uri"
      permalink_public:
        type: "string"
        format: "uri"
      pinned_info:
        $ref: "#/definitions/defs_pinned_info"
      pinned_to:
        type: "array"
        items:
          $ref: "#/definitions/defs_channel"
      pretty_type:
        type: "string"
      public_url_shared:
        type: "boolean"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      shares:
        $ref: "#/definitions/objs_file_shares"
      size:
        type: "integer"
      source_team:
        $ref: "#/definitions/defs_team"
      state:
        type: "string"
      thumb_1024:
        type: "string"
        format: "uri"
      thumb_1024_h:
        type: "integer"
      thumb_1024_w:
        type: "integer"
      thumb_160:
        type: "string"
        format: "uri"
      thumb_360:
        type: "string"
        format: "uri"
      thumb_360_h:
        type: "integer"
      thumb_360_w:
        type: "integer"
      thumb_480:
        type: "string"
        format: "uri"
      thumb_480_h:
        type: "integer"
      thumb_480_w:
        type: "integer"
      thumb_64:
        type: "string"
        format: "uri"
      thumb_720:
        type: "string"
        format: "uri"
      thumb_720_h:
        type: "integer"
      thumb_720_w:
        type: "integer"
      thumb_80:
        type: "string"
        format: "uri"
      thumb_800:
        type: "string"
        format: "uri"
      thumb_800_h:
        type: "integer"
      thumb_800_w:
        type: "integer"
      thumb_960:
        type: "string"
        format: "uri"
      thumb_960_h:
        type: "integer"
      thumb_960_w:
        type: "integer"
      timestamp:
        type: "integer"
      title:
        type: "string"
      updated:
        type: "integer"
      url_private:
        type: "string"
        format: "uri"
      url_private_download:
        type: "string"
        format: "uri"
      user:
        type: "string"
      user_team:
        $ref: "#/definitions/defs_team"
      username:
        type: "string"
    title: "file object"
    additionalProperties: {}
  objs_group:
    type: "object"
    required:
    - "created"
    - "creator"
    - "id"
    - "is_group"
    - "members"
    - "name"
    - "name_normalized"
    - "purpose"
    - "topic"
    properties:
      created:
        type: "integer"
      creator:
        $ref: "#/definitions/defs_user_id"
      id:
        $ref: "#/definitions/defs_group_id"
      is_archived:
        type: "boolean"
      is_deleted:
        type: "boolean"
      is_group:
        type: "boolean"
      is_moved:
        type: "integer"
      is_mpim:
        type: "boolean"
      is_open:
        type: "boolean"
      is_pending_ext_shared:
        type: "boolean"
      last_read:
        $ref: "#/definitions/defs_ts"
      latest: {}
      members:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_user_id"
        minItems: 1
      name:
        type: "string"
      name_normalized:
        type: "string"
      num_members:
        type: "integer"
      priority:
        type: "number"
      purpose:
        $ref: "#/definitions/objs_channel_purpose"
      topic:
        $ref: "#/definitions/objs_channel_purpose"
      unread_count:
        type: "integer"
      unread_count_display:
        type: "integer"
    title: "Group object"
    additionalProperties: {}
  objs_icon:
    type: "object"
    properties:
      image_102:
        type: "string"
      image_132:
        type: "string"
      image_230:
        type: "string"
      image_34:
        type: "string"
      image_44:
        type: "string"
      image_68:
        type: "string"
      image_88:
        type: "string"
      image_default:
        type: "boolean"
  objs_im:
    type: "object"
    required:
    - "created"
    - "id"
    - "is_im"
    - "is_org_shared"
    - "is_user_deleted"
    - "user"
    properties:
      created:
        type: "integer"
      id:
        $ref: "#/definitions/defs_dm_id"
      is_app_home:
        type: "boolean"
      is_ext_shared:
        type: "boolean"
      is_im:
        type: "boolean"
      is_org_shared:
        type: "boolean"
      is_shared:
        type: "boolean"
      is_user_deleted:
        type: "boolean"
      priority:
        type: "number"
      user:
        $ref: "#/definitions/defs_user_id"
    title: "IM Object"
    additionalProperties: {}
  objs_message:
    type: "object"
    required:
    - "text"
    - "ts"
    - "type"
    properties:
      attachments:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_message_attachments"
        minItems: 1
      blocks:
        $ref: "#/definitions/blocks"
      bot_id: {}
      client_msg_id:
        type: "string"
      comment:
        $ref: "#/definitions/objs_comment"
      display_as_bot:
        type: "boolean"
      file:
        $ref: "#/definitions/objs_file"
      files:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/objs_file"
        minItems: 1
      icons:
        $ref: "#/definitions/objs_message_icons"
      inviter:
        $ref: "#/definitions/defs_user_id"
      is_delayed_message:
        type: "boolean"
      is_intro:
        type: "boolean"
      is_starred:
        type: "boolean"
      last_read:
        $ref: "#/definitions/defs_ts"
      latest_reply:
        $ref: "#/definitions/defs_ts"
      name:
        type: "string"
      old_name:
        type: "string"
      parent_user_id:
        $ref: "#/definitions/defs_user_id"
      permalink:
        type: "string"
        format: "uri"
      pinned_to:
        type: "array"
        items:
          $ref: "#/definitions/defs_channel"
      purpose:
        type: "string"
      reactions:
        type: "array"
        items:
          $ref: "#/definitions/objs_reaction"
      replies:
        type: "array"
        items:
          $ref: "#/definitions/objs_message_replies"
      reply_count:
        type: "integer"
      reply_users:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/defs_user_id"
        minItems: 1
      reply_users_count:
        type: "integer"
      source_team:
        $ref: "#/definitions/defs_workspace_id"
      subscribed:
        type: "boolean"
      subtype:
        type: "string"
      team:
        $ref: "#/definitions/defs_workspace_id"
      text:
        type: "string"
      thread_ts:
        $ref: "#/definitions/defs_ts"
      topic:
        type: "string"
      ts:
        $ref: "#/definitions/defs_ts"
      type:
        type: "string"
      unread_count:
        type: "integer"
      upload:
        type: "boolean"
      user:
        $ref: "#/definitions/defs_user_id"
      user_profile:
        $ref: "#/definitions/objs_user_profile_short"
      user_team:
        $ref: "#/definitions/defs_workspace_id"
      username:
        type: "string"
    title: "Message object"
    additionalProperties: {}
  objs_paging:
    type: "object"
    required:
    - "page"
    - "total"
    properties:
      count:
        type: "integer"
      page:
        type: "integer"
      pages:
        type: "integer"
      per_page:
        type: "integer"
      spill:
        type: "integer"
      total:
        type: "integer"
    title: "paging object"
    additionalProperties: {}
  objs_reaction:
    type: "object"
    required:
    - "count"
    - "name"
    - "users"
    properties:
      count:
        type: "integer"
      name:
        type: "string"
      users:
        type: "array"
        items:
          $ref: "#/definitions/defs_user_id"
    title: "Reaction object"
    additionalProperties: {}
  objs_reminder:
    type: "object"
    required:
    - "creator"
    - "id"
    - "recurring"
    - "text"
    - "user"
    properties:
      complete_ts:
        type: "integer"
      creator:
        $ref: "#/definitions/defs_user_id"
      id:
        $ref: "#/definitions/defs_reminder_id"
      recurring:
        type: "boolean"
      text:
        type: "string"
      time:
        type: "integer"
      user:
        $ref: "#/definitions/defs_user_id"
    additionalProperties: {}
  objs_resources:
    type: "object"
    required:
    - "ids"
    properties:
      excluded_ids:
        type: "array"
        items: {}
      ids:
        type: "array"
        items: {}
      wildcard:
        type: "boolean"
    title: "resources in info from apps.permissions.info"
    additionalProperties: {}
  objs_response_metadata:
    type: "object"
    required:
    - "next_cursor"
    properties:
      next_cursor:
        type: "string"
    title: "new paging style"
    additionalProperties: {}
  objs_scopes:
    type: "array"
    items:
      type: "string"
      title: "Named OAuth scopes"
      x-examples:
      - "chat:write"
      - "im:history"
      - "im:read"
  objs_subteam:
    type: "object"
    required:
    - "auto_provision"
    - "auto_type"
    - "created_by"
    - "date_create"
    - "date_delete"
    - "date_update"
    - "deleted_by"
    - "description"
    - "enterprise_subteam_id"
    - "handle"
    - "id"
    - "is_external"
    - "is_subteam"
    - "is_usergroup"
    - "name"
    - "prefs"
    - "team_id"
    - "updated_by"
    properties:
      auto_provision:
        type: "boolean"
      auto_type: {}
      created_by:
        $ref: "#/definitions/defs_user_id"
      date_create:
        type: "integer"
      date_delete:
        type: "integer"
      date_update:
        type: "integer"
      deleted_by: {}
      description:
        type: "string"
      enterprise_subteam_id:
        type: "string"
      handle:
        type: "string"
      id:
        $ref: "#/definitions/defs_subteam_id"
      is_external:
        type: "boolean"
      is_subteam:
        type: "boolean"
      is_usergroup:
        type: "boolean"
      name:
        type: "string"
      prefs:
        $ref: "#/definitions/objs_subteam_prefs"
      team_id:
        $ref: "#/definitions/defs_team"
      updated_by:
        $ref: "#/definitions/defs_user_id"
      user_count:
        type: "integer"
      users:
        type: "array"
        items:
          $ref: "#/definitions/defs_user_id"
    title: "Subteam/Usergroup Object"
    additionalProperties: {}
  objs_team:
    type: "object"
    required:
    - "domain"
    - "email_domain"
    - "icon"
    - "id"
    - "name"
    properties:
      archived:
        type: "boolean"
      avatar_base_url:
        type: "string"
        format: "uri"
      created:
        type: "integer"
      date_create:
        type: "integer"
      deleted:
        type: "boolean"
      description:
        type: "string"
      discoverable:
        type: "string"
      domain:
        type: "string"
      email_domain:
        type: "string"
      enterprise_id:
        $ref: "#/definitions/defs_enterprise_id"
      enterprise_name:
        $ref: "#/definitions/defs_enterprise_name"
      has_compliance_export:
        type: "boolean"
      icon:
        $ref: "#/definitions/objs_icon"
      id:
        $ref: "#/definitions/defs_team"
      is_assigned:
        type: "boolean"
      is_enterprise:
        type: "integer"
      limit_ts:
        type: "integer"
      messages_count:
        type: "integer"
      msg_edit_window_mins:
        type: "integer"
      name:
        type: "string"
      over_integrations_limit:
        type: "boolean"
      over_storage_limit:
        type: "boolean"
      plan:
        type: "string"
        enum:
        - ""
        - "std"
        - "plus"
        - "compliance"
        - "enterprise"
    title: "Team Object"
    additionalProperties: {}
  objs_team_profile_field:
    type: "object"
    required:
    - "hint"
    - "id"
    - "label"
    - "options"
    - "ordering"
    - "type"
    properties:
      field_name:
        type: "string"
      hint:
        type: "string"
      id:
        type: "string"
        pattern: "^X[a-zA-Z0-9]{9}$"
      is_hidden:
        type: "boolean"
      label:
        type: "string"
      options:
        type: "array"
        items:
          type: "string"
      ordering:
        type: "number"
      possible_values:
        type: "array"
        items:
          type: "string"
      type:
        type: "string"
        enum:
        - "text"
        - "date"
        - "link"
        - "mailto"
        - "options_list"
        - "user"
    additionalProperties: {}
  objs_user: {}
  objs_user_profile:
    type: "object"
    required:
    - "avatar_hash"
    - "display_name"
    - "display_name_normalized"
    - "real_name"
    - "real_name_normalized"
    properties:
      always_active:
        type: "boolean"
      api_app_id:
        $ref: "#/definitions/defs_app_id"
      avatar_hash:
        type: "string"
      bot_id:
        $ref: "#/definitions/defs_bot_id"
      display_name:
        type: "string"
      display_name_normalized:
        type: "string"
      email:
        type: "string"
        format: "email"
      first_name:
        type: "string"
      guest_channels:
        type: "string"
      guest_expiration_ts:
        type: "integer"
      guest_invited_by:
        type: "string"
      image_1024:
        type: "string"
        format: "uri"
      image_192:
        type: "string"
        format: "uri"
      image_24:
        type: "string"
        format: "uri"
      image_32:
        type: "string"
        format: "uri"
      image_48:
        type: "string"
        format: "uri"
      image_512:
        type: "string"
        format: "uri"
      image_72:
        type: "string"
        format: "uri"
      image_original:
        type: "string"
        format: "uri"
      is_custom_image:
        type: "boolean"
      last_name:
        type: "string"
      phone:
        type: "string"
      real_name:
        type: "string"
      real_name_normalized:
        type: "string"
      skype:
        type: "string"
      status_emoji:
        type: "string"
      status_expiration:
        type: "integer"
      status_text:
        type: "string"
      status_text_canonical:
        type: "string"
      team:
        $ref: "#/definitions/defs_workspace_id"
      teams:
        $ref: "#/definitions/defs_workspace_id"
      title:
        type: "string"
    title: "User profile object"
    additionalProperties: {}
  objs_user_profile_short:
    type: "object"
    required:
    - "avatar_hash"
    - "display_name"
    - "first_name"
    - "image_72"
    - "is_restricted"
    - "is_ultra_restricted"
    - "name"
    - "real_name"
    - "team"
    properties:
      avatar_hash:
        type: "string"
      display_name:
        type: "string"
      first_name:
        type: "string"
      image_72:
        type: "string"
        format: "uri"
      is_restricted:
        type: "boolean"
      is_ultra_restricted:
        type: "boolean"
      name:
        type: "string"
      real_name:
        type: "string"
      team:
        $ref: "#/definitions/defs_workspace_id"
    additionalProperties: {}
  Default success template:
    type: "object"
    required:
    - "ok"
    properties:
      ok:
        $ref: "#/definitions/defs_ok_true"
    description: "Verbose schema not yet ready for this method."
  blocks_inner:
    type: "object"
    required:
    - "type"
    properties:
      type:
        type: "string"
  objs_channel_purpose:
    type: "object"
    required:
    - "creator"
    - "last_set"
    - "value"
    properties:
      creator:
        $ref: "#/definitions/defs_topic_purpose_creator"
      last_set:
        type: "integer"
      value:
        type: "string"
  objs_file_shares:
    type: "object"
    properties:
      private: {}
      public: {}
  objs_message_attachments:
    type: "object"
    required:
    - "id"
    properties:
      fallback:
        type: "string"
      id:
        type: "integer"
      image_bytes:
        type: "integer"
      image_height:
        type: "integer"
      image_url:
        type: "string"
      image_width:
        type: "integer"
  objs_message_icons:
    type: "object"
    properties:
      emoji:
        type: "string"
  objs_message_replies:
    type: "object"
    required:
    - "ts"
    - "user"
    properties:
      ts:
        $ref: "#/definitions/defs_ts"
      user:
        $ref: "#/definitions/defs_user_id"
  objs_subteam_prefs:
    type: "object"
    required:
    - "channels"
    - "groups"
    properties:
      channels:
        type: "array"
        items:
          $ref: "#/definitions/defs_channel_id"
      groups:
        type: "array"
        items:
          $ref: "#/definitions/defs_group_id"
externalDocs:
  description: "Learn more about the Slack Web API"
  url: "https://api.slack.com/web"
